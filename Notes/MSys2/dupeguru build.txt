http://pyqt.sourceforge.net/Docs/PyQt5/installation.html
http://pyqt.sourceforge.net/Docs/PyQt5/installation.html#building-and-installing-from-source

Basenames of packages needed that I tried to add and use; it failed!!
	mingw-w64-python3
	mingw-w64-pyqt5
	mingw-w64-python-pip

# Commands to uninstall the 64 bit mingw python packages
pacman -R mingw-w64-x86_64-python3-pyqt5
pacman -R mingw-w64-x86_64-python3-pip
pacman -R mingw-w64-x86_64-python3-sip
pacman -R mingw-w64-x86_64-python3-setuptools
pacman -R mingw-w64-x86_64-python3
rm -fr c:/apps64/msys2/mingw64/lib/python3.5


Basenames of packages needed that I trying to add
	mingw-w64-x86_64-qt5

# Commands to install the 64 bit mingw qt5 packages
	pacman -S mingw-w64-x86_64-qt5




$ python3 -m ensurepip --upgrade --default-pip
Ignoring indexes: https://pypi.python.org/simple
Requirement already up-to-date: setuptools in c:/apps64/msys2/mingw64/lib/python3.5/site-packages
Requirement already up-to-date: pip in c:/apps64/msys2/mingw64/lib/python3.5/site-packages


mkdir -p ~/devel/version_control && cd ~/devel/version_control && pwd -W
# C:/Apps64/MSys2/home/stahta01/devel/version_control

git clone https://github.com/stahta01/dupeguru.git dupeguru-git

cd ~/devel/version_control/dupeguru-git

python3 -m pip install -r requirements.txt

python3 -m pip install virtualenv

pyvenv --system-site-packages --upgrade --without-pip env

[--symlinks | --copies] [--clear] [--upgrade]

python3 -m venv --system-site-packages --without-pip env

./bootstrap.sh

python3 build.py

Traceback (most recent call last):
  File "build.py", line 16, in <module>
    from hscommon import sphinxgen
ImportError: cannot import name 'sphinxgen'


# From https://docs.python.org/3/library/venv.html

pyvenv.py

# Open Mingw64 or Mingw32 prompt

For Linux (`--system-site-packages` is to be able to import PyQt):
    $ pyvenv --system-site-packages env



echo $PYTHONSTARTUP
echo $PYTHONPATH
echo $PYTHONHOME

	PYTHONCASEOK
	PYTHONIOENCODING
	PYTHONFAULTHANDLER
	PYTHONHASHSEED

# Might be needed on MSys2
python3 -m ensurepip --upgrade
python3 -m ensurepip --upgrade --default-pip
python3 -Im ensurepip --upgrade --default-pip

$ pyvenv --system-site-packages env
Error: Command '['C:/Apps64/MSys2/home/stahta01/env/Scripts/python3.5.exe', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 3

$ python3 -m venv env
Error: Command '['C:/Apps64/MSys2/home/stahta01/env/Scripts/python3.exe', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 3


pyvenv --system-site-packages --upgrade --without-pip env

[--symlinks | --copies] [--clear] [--upgrade]

python3 -m venv --system-site-packages env


# From http://superuser.com/questions/550732/use-mklink-in-msys
You can use Windows native symlinks. To enable it uncomment line with:
MSYS=winsymlinks:nativestrict
in MSYS2 start bat file. And run MSYS2 with admin privileges.

    $ source env/bin/activate
    $ pip install -r requirements.txt

Send2Trash>=1.3.0
sphinx>=1.2.2
polib>=1.0.4
hsaudiotag3k>=1.1.3

With your virtualenv activated, you can build and run dupeGuru with these commands:

    $ python build.py
    $ python run.py

You can also package dupeGuru into an installable package with:

    $ python package.py

### Running tests

The complete test suite is ran with [Tox 1.7+][tox]. If you have it installed system-wide, you
don't even need to set up a virtualenv. Just `cd` into the root project folder and run `tox`.

If you don't have Tox system-wide, install it in your virtualenv with `pip install tox` and then
run `tox`.

You can also run automated tests without Tox. Extra requirements for running tests are in
`requirements-extra.txt`. So, you can do `pip install -r requirements-extra.txt` inside your
virtualenv and then `py.test core hscommon`

https://wiki.qt.io/MSYS2
http://stackoverflow.com/questions/13270877/how-to-manually-install-a-pypi-module-without-pip-easy-install

python3 -h
	usage: C:\Apps64\MSys2\mingw64\bin\python3.exe [option] ... [-c cmd | -m mod | file | -] [arg] ...
	Options and arguments (and corresponding environment variables):
	-b     : issue warnings about str(bytes_instance), str(bytearray_instance)
			 and comparing bytes/bytearray with str. (-bb: issue errors)
	-B     : don't write .py[co] files on import; also PYTHONDONTWRITEBYTECODE=x
	-c cmd : program passed in as string (terminates option list)
	-d     : debug output from parser; also PYTHONDEBUG=x
	-E     : ignore PYTHON* environment variables (such as PYTHONPATH)
	-h     : print this help message and exit (also --help)
	-i     : inspect interactively after running script; forces a prompt even
			 if stdin does not appear to be a terminal; also PYTHONINSPECT=x
	-I     : isolate Python from the user's environment (implies -E and -s)
	-m mod : run library module as a script (terminates option list)
	-O     : optimize generated bytecode slightly; also PYTHONOPTIMIZE=x
	-OO    : remove doc-strings in addition to the -O optimizations
	-q     : don't print version and copyright messages on interactive startup
	-s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE
	-S     : don't imply 'import site' on initialization
	-u     : unbuffered binary stdout and stderr, stdin always buffered;
			 also PYTHONUNBUFFERED=x
			 see man page for details on internal buffering relating to '-u'
	-v     : verbose (trace import statements); also PYTHONVERBOSE=x
			 can be supplied multiple times to increase verbosity
	-V     : print the Python version number and exit (also --version)
	-W arg : warning control; arg is action:message:category:module:lineno
			 also PYTHONWARNINGS=arg
	-x     : skip first line of source, allowing use of non-Unix forms of #!cmd
	-X opt : set implementation-specific option
	file   : program read from script file
	-      : program read from stdin (default; interactive mode if a tty)
	arg ...: arguments passed to program in sys.argv[1:]

	Other environment variables:
	PYTHONSTARTUP: file executed on interactive startup (no default)
	PYTHONPATH   : ';'-separated list of directories prefixed to the
				   default module search path.  The result is sys.path.
	PYTHONHOME   : alternate <prefix> directory (or <prefix>;<exec_prefix>).
				   The default module search path uses <prefix>\lib.
	PYTHONCASEOK : ignore case in 'import' statements (Windows).
	PYTHONIOENCODING: Encoding[:errors] used for stdin/stdout/stderr.
	PYTHONFAULTHANDLER: dump the Python traceback on fatal errors.
	PYTHONHASHSEED: if this variable is set to 'random', a random value is used
	   to seed the hashes of str, bytes and datetime objects.  It can also be
	   set to an integer in the range [0,4294967295] to get hash values with a
	   predictable seed.

python3 -m venv -h
	usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]
				[--upgrade] [--without-pip]
				ENV_DIR [ENV_DIR ...]

	Creates virtual Python environments in one or more target directories.

	positional arguments:
	  ENV_DIR               A directory to create the environment in.

	optional arguments:
	  -h, --help            show this help message and exit
	  --system-site-packages
							Give the virtual environment access to the system
							site-packages dir.
	  --symlinks            Try to use symlinks rather than copies, when symlinks
							are not the default for the platform.
	  --copies              Try to use copies rather than symlinks, even when
							symlinks are the default for the platform.
	  --clear               Delete the contents of the environment directory if it
							already exists, before environment creation.
	  --upgrade             Upgrade the environment directory to use this version
							of Python, assuming Python has been upgraded in-place.
	  --without-pip         Skips installing or upgrading pip in the virtual
							environment (pip is bootstrapped by default)

$ virtualenv -h
Usage: virtualenv [OPTIONS] DEST_DIR

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         Increase verbosity.
  -q, --quiet           Decrease verbosity.
  -p PYTHON_EXE, --python=PYTHON_EXE
                        The Python interpreter to use, e.g.,
                        --python=python2.5 will use the python2.5 interpreter
                        to create the new environment.  The default is the
                        interpreter that virtualenv was installed with
                        (C:/apps64/msys2/mingw64/bin/python3.exe)
  --clear               Clear out the non-root install and start from scratch.
  --no-site-packages    DEPRECATED. Retained only for backward compatibility.
                        Not having access to global site-packages is now the
                        default behavior.
  --system-site-packages
                        Give the virtual environment access to the global
                        site-packages.
  --always-copy         Always copy files rather than symlinking.
  --unzip-setuptools    Unzip Setuptools when installing it.
  --relocatable         Make an EXISTING virtualenv environment relocatable.
                        This fixes up scripts and makes all .pth files
                        relative.
  --no-setuptools       Do not install setuptools in the new virtualenv.
  --no-pip              Do not install pip in the new virtualenv.
  --no-wheel            Do not install wheel in the new virtualenv.
  --extra-search-dir=DIR
                        Directory to look for setuptools/pip distributions in.
                        This option can be used multiple times.
  --download            Download preinstalled packages from PyPI.
  --no-download, --never-download
                        Do not download preinstalled packages from PyPI.
  --prompt=PROMPT       Provides an alternative prompt prefix for this
                        environment.
  --setuptools          DEPRECATED. Retained only for backward compatibility.
                        This option has no effect.
  --distribute          DEPRECATED. Retained only for backward compatibility.
                        This option has no effect.


https://www.onwebsecurity.com/category/msys
