####
# Requires Cygwin packages:
#   libgtk2.0-devel
#
####

$   pkg-config gtk+-2.0 --libs
### Good Result
-lgtk-x11-2.0 -lgdk-x11-2.0 -lpangocairo-1.0 -lgio-2.0 -lXrender -lXinerama -lXi -lXrandr -lXcursor -lXcomposite -lXdamage -lXfixes -lX11 -lXext -latk-1.0 -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lpangoft2-1.0 -lpango-1.0 -lgobject-2.0 -lglib-2.0 -lintl -lfontconfig -lfreetype
###

####
$   i686-pc-cygwin-g++ --version
## Result
i686-pc-cygwin-g++ (GCC) 5.3.0
##
$   i686-pc-cygwin-g++ -pthread
### Good Result
i686-pc-cygwin-g++: fatal error: no input files
compilation terminated.
###
### Bad Result
i686-pc-cygwin-g++: error: unrecognized command line option ‘-pthread’
i686-pc-cygwin-g++: fatal error: no input files
compilation terminated.
####

$   echo $CYGWIN
## Result
nodosfilewarning
##
$ cd ~/devel/wxWidgets-git

$ git status -uno
$ git fetch --prune
$ git checkout master
$ git pull

$ mkdir build_cb_gtk2_wx3.1.x_shared_multilib_unicode

$ cd ~/devel/wxWidgets-git/build_cb_gtk2_wx3.1.x_shared_multilib_unicode
# make uninstall
$  export CPPFLAGS=""
$  export CXXFLAGS="-Wno-attributes"
# Do NOT use host unless it differs from build and maybe not even then --host=i686-pc-cygwin \
$  ../configure --prefix=/opt/cb/gtk2/wx \
      --disable-sys-libs \
      --enable-compat28 \
      --with-gtk=2 \
      --with-cxx=11 \
      --enable-graphics_ctx \
      --disable-monolithic \
      --enable-shared \
      --enable-xrc \
      --without-gtkprint \
      --without-gnomeprint \
      --disable-universal \
      --disable-precomp-headers \
      --enable-unicode
###
Configured wxWidgets 3.1.1 for `i686-pc-cygwin'

  Which GUI toolkit should wxWidgets use?                 GTK+ 2 with support for libnotify
  Should wxWidgets be compiled into single library?       no
  Should wxWidgets be linked as a shared library?         yes
  Should wxWidgets support Unicode?                       yes (using wchar_t)
  What level of wxWidgets compatibility should be enabled?
                                       wxWidgets 2.8      yes
                                       wxWidgets 3.0      yes
  Which libraries should wxWidgets use?
                                       STL                no
                                       jpeg               builtin
                                       png                builtin
                                       regex              builtin
                                       tiff               builtin
                                       zlib               builtin
                                       expat              builtin
                                       libmspack          no
                                       sdl                no
###
#$   make clean
$   make
$   make install
###
 The installation of wxWidgets is finished.  On certain
 platforms (e.g. Linux) you'll now have to run ldconfig
 if you installed a shared library and also modify the
 LD_LIBRARY_PATH (or equivalent) environment variable.
###
$   which wx-config
$   echo $PATH
/usr/local/bin:/usr/bin:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Program Files/IDM Computer Solutions/UltraEdit:/cygdrive/c/Program Files/TortoiseGit/bin:/cygdrive/c/Apps/WATCOM/BINNT:/cygdrive/c/Apps/WATCOM/BINW:/cygdrive/c/PROGRA~1/git/bin:/cygdrive/c/Apps/misc:/cygdrive/c/Apps32/misc:/cygdrive/c/Users/USERNAME/AppData/Local/M2OSW/pkg-explorer/WPKG_ROOT/bin:/cygdrive/c/Apps32/7za920:/cygdrive/c/Apps32/GnuWin32/bin:/cygdrive/c/Apps32/Apache-Subversion-1.9/bin:/cygdrive/c/Program Files/Git/cmd:/usr/lib/lapack
$   export PATH=/usr/bin:/opt/cb/gtk2/wx/bin:$PATH
$   which wx-config
$   wx-config --prefix
$   wx-config --libs


#########

####
# Requires Cygwin packages:
#   libtool 2.4-1
#		automake
#   zip
#   gcc 4.9.2-1 does not work "g++: error: unrecognized command line option '-pthread'"
#   gcc 4.8.3-2	seems to be working great.
#
####


cd ~/devel/codeblocks_https_metadata-git

git status -uno
git checkout -- src/sdk/wxscintilla/Readme
git pull --rebase


/opt/cb/gtk2/wx/bin/wx-config --list

echo $ACLOCAL_FLAGS
export ACLOCAL_FLAGS="-I `/opt/cb/gtk2/wx/bin/wx-config --prefix`/share/aclocal"
echo $ACLOCAL_FLAGS

./bootstrap
export CPPFLAGS=""
export CXXFLAGS="-Wno-attributes"
echo $CXXFLAGS

#  --enable-static
 ./configure --prefix=/opt/cb/gtk2/wx --with-platform=gtk --enable-debug --host=i686-pc-cygwin --disable-xpmanifest --disable-pch --with-wx-config=/opt/cb/gtk2/wx/bin/wx-config


#$  make clean && make

make

make install

#  make && make install

In order to run Code::Blocks
####
# Requires Cygwin packages:
#   These packages where suggested as good ones to add to get GNU Octave to run; I am hoping it workes for getting CB to run.
#   xinit
#   xlaunch
#       ??gnuplot
####

C:\Apps32\Cygwin\opt\cb\gtk2\wx\lib\codeblocks\plugins

echo $PATH
export PATH=/opt/cb/gtk2/wx/lib:$PATH
Fixed: C:/Apps32/Cygwin/opt/cb/gtk2/wx/bin/codeblocks.exe: error while loading shared libraries: cygwx_gtk2u_xrc-3.1-0.dll: cannot open shared object file: No such file or directory

$   startxwin /opt/cb/gtk2/wx/bin/codeblocks.exe --debug-log

# Next line fails likely because the path has NOT been changed.
C:\Apps32\Cygwin\bin\mintty.exe /bin/sh -lc 'startxwin /opt/cb/gtk2/wx/bin/codeblocks.exe --prefix="/opt/cb/gtk2/wx"'


NOTES: Below ignore till have build issues.

$ uname
CYGWIN_NT-6.1


if test "x$LINUX_TRUE" = "x" -o \
        "x$DARWIN_TRUE" = "x" ; then
    AX_CXX_COMPILE_STDCXX(11, noext)
else
    AX_CXX_COMPILE_STDCXX(11, ext)
fi

# Not added this code; yet, because the error I expected did NOT happen.
if test "x$LINUX_TRUE" = "x" -o \
        "x$DARWIN_TRUE" = "x" ; then
    CPPFLAGS="$CPPFLAGS -ansi -DTIXML_USE_STL"
else
    CPPFLAGS="$CPPFLAGS -DTIXML_USE_STL"
fi

$ mintty --help
Usage: mintty [OPTION]... [ PROGRAM [ARG]... | - ]

Start a new terminal session running the specified program or the user's shell.
If a dash is given instead of a program, invoke the shell as a login shell.

Options:
  -c, --config FILE     Load specified config file
  -e, --exec            Treat remaining arguments as the command to execute
  -h, --hold never|start|error|always  Keep window open after command finishes
  -i, --icon FILE[,IX]  Load window icon from file, optionally with index
  -l, --log FILE|-      Log output to file or stdout
  -o, --option OPT=VAL  Override config file option with given value
  -p, --position X,Y    Open window at specified coordinates
  -s, --size COLS,ROWS  Set screen size in characters
  -t, --title TITLE     Set window title (default: the invoked command)
  -u, --utmp            Create a utmp entry
  -w, --window normal|min|max|full|hide  Set initial window state
      --class CLASS     Set window class name (default: mintty)
  -H, --help            Display help and exit
  -V, --version         Print version information and exit
