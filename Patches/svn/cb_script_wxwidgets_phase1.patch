Index: src/plugins/scriptedwizard/resources/wxwidgets/wizard.script
===================================================================
--- src/plugins/scriptedwizard/resources/wxwidgets/wizard.script	(revision 10135)
+++ src/plugins/scriptedwizard/resources/wxwidgets/wizard.script	(working copy)
@@ -6,6 +6,11 @@
 
 // globals
 WizType <- wizProject;
+WxGVarDefault <- _T("#wx")
+WxPathDefault <- _T("$(") + WxGVarDefault + _T(")");
+Wx30PathDefault <- _T("$(") + WxGVarDefault + _T("30)");
+WxPathDefaultInc <- _T("$(") + WxGVarDefault + _T(".include)");
+WxPathDefaultLib <- _T("$(") + WxGVarDefault + _T(".lib)");
 WxPath <- _T("");
 WantPCH <- false;
 IsDLL <- false;
@@ -74,7 +79,7 @@
         Wizard.AddPage(_T("WxProjDetails"));
         Wizard.AddPage(_T("WxGuiSelect"));
         if (PLATFORM == PLATFORM_MSW)
-            Wizard.AddGenericSelectPathPage(_T("WxPath"), wxpath_msg, _T("wxWidgets' location:"), _T("$(#wx)"));
+            Wizard.AddGenericSelectPathPage(_T("WxPath"), wxpath_msg, _T("wxWidgets' location:"), WxPathDefault);
         // we need the compiler selection before wx settings, because we 'll have
         // to validate the settings. To do this we must know the compiler beforehand...
         Wizard.AddCompilerPage(_T(""), _T("*"), true, true);
@@ -102,7 +107,7 @@
         Wizard.AddInfoPage(_T("WxIntro"), intro_msg);
         Wizard.AddGenericSingleChoiceListPage(_T("wxVersionPage"), _T("Please select the wxWidgets version you want to use."), _T("wxWidgets 2.6.x;wxWidgets 2.8.x;wxWidgets 3.0.x"), WxVersion); // select wxwidgets version
         if (PLATFORM == PLATFORM_MSW)
-            Wizard.AddGenericSelectPathPage(_T("WxPath"), wxpath_msg, _T("wxWidgets' location:"), _T("$(#wx)"));
+            Wizard.AddGenericSelectPathPage(_T("WxPath"), wxpath_msg, _T("wxWidgets' location:"), WxPathDefault);
         // we need the compiler selection before wx settings, because we 'll have
         // to validate the settings. To do this we must know the compiler beforehand...
         Wizard.AddBuildTargetPage(_T(""), false, true, _T(""), _T("*"), true);
@@ -214,22 +219,53 @@
     if (fwd)
     {
         local dir         = Wizard.GetTextControlValue(_T("txtFolder"));
-        local dir_nomacro = ReplaceMacros(dir, true);
-        if (!IO.FileExists(dir_nomacro + _T("/include/wx/wx.h")))
+//        local dir_nomacro = VerifyDirectory(dir);
+
+//        if (dir_nomacro.IsEmpty())
+//            return false;
+
+        if (dir.Matches(WxPathDefault))
         {
-            ShowError(_T("The path you entered seems valid, but this wizard " +
-                    "can't locate wxWidgets' files in it..."));
+            WxPathDefaultInc = _T("$(") + WxGVarDefault + _T(".include)");
+            WxPathDefaultLib = _T("$(") + WxGVarDefault + _T(".lib)");        
+        }
+        else if (dir.Matches(Wx30PathDefault))
+        {
+            WxPathDefaultInc = _T("$(") + WxGVarDefault + _T("30.include)");
+            WxPathDefaultLib = _T("$(") + WxGVarDefault + _T("30.lib)");
+        }
+
+         // verify include dependencies
+        local dir_nomacro_inc = GetCompilerIncludeDir(dir, WxPathDefault, WxPathDefaultInc);
+        if (dir_nomacro_inc.IsEmpty())
             return false;
+        if (!VerifyFile(dir_nomacro_inc + wxFILE_SEP_PATH + _T("wx"), _T("wx.h"), _T("wxWidget's include"))) 
+            return false;       
+
+        // verify library dependencies
+        local dir_nomacro_lib = GetCompilerLibDir(dir, WxPathDefault, WxPathDefaultLib);
+        if (dir_nomacro_lib.IsEmpty())
+            return false;        
+
+        WxPath = dir; // Remember the original selection.
+
+        local is_macro = _T("");
+
+        // try to resolve the include directory as macro
+        is_macro = GetCompilerIncludeMacro(dir, WxPathDefault, WxPathDefaultInc);
+        if (is_macro.IsEmpty())
+        {
+            // not possible -> use the real inc path we had computed instead
+            WxPathDefaultInc = dir_nomacro_inc;
         }
 
-        // see if it matches the global var. if it does, use the var instead...
-        if (GetUserVariableManager().Exists(_T("#wx")))
+        // try to resolve the library directory as macro
+        is_macro = GetCompilerLibMacro(dir, WxPathDefault, WxPathDefaultLib);
+        if (is_macro.IsEmpty())
         {
-            local gvar = ReplaceMacros(_T("$(#wx)"), true);
-            if (gvar.Matches(dir_nomacro))
-                dir = gvar;
+            // not possible -> use the real lib path we had computed instead
+            WxPathDefaultLib = dir_nomacro_lib;
         }
-        WxPath = dir;
     }
     return true;
 }
@@ -296,7 +332,7 @@
         local lib_wxver;
         local lib_unic_suffix;
         local lib_suffix;
-        local lib = WxPath + _T("/lib/");
+        local lib = WxPathDefaultLib + _T("/");
         if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("gcc*")))
         {
             lib = lib + _T("gcc_");
@@ -632,8 +668,8 @@
     }
     else
     {
-        project.AddIncludeDir(WxPath + _T("/include"));
-        project.AddResourceIncludeDir(WxPath + _T("/include"));
+        project.AddIncludeDir(WxPathDefaultInc);
+        project.AddResourceIncludeDir(WxPathDefaultInc);
         libdir = LibPath + _T("/msw");
         if (IsUnicode)
             libdir = libdir + _T("u");
