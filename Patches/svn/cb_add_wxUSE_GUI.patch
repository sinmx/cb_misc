Index: src/include/cbplugin.h
===================================================================
--- src/include/cbplugin.h	(revision 9855)
+++ src/include/cbplugin.h	(working copy)
@@ -41,16 +41,20 @@
 #define PLUGIN_SDK_VERSION_RELEASE 0
 
 // class decls
+#if wxUSE_GUI
 class wxMenuBar;
 class wxMenu;
 class wxToolBar;
 class wxPanel;
 class wxWindow;
+#endif // #if wxUSE_GUI
 
 class cbBreakpoint;
 class cbConfigurationPanel;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class cbDebuggerConfiguration;
 class cbEditor;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class cbProject;
 class cbStackFrame;
 class cbStatusBar;
@@ -59,7 +63,9 @@
 class Compiler;
 class CompileTargetBase;
 class ConfigManagerWrapper;
+#if wxUSE_GUI
 class FileTreeData;
+#endif // #if wxUSE_GUI
 class ProjectBuildTarget;
 
 struct PluginInfo;
@@ -112,7 +118,9 @@
           * @param parent The parent window.
           * @return A pointer to the plugin's cbConfigurationPanel. It is deleted by the caller.
           */
+#if wxUSE_GUI
         virtual cbConfigurationPanel* GetConfigurationPanel(cb_optional wxWindow* parent){ return nullptr; }
+#endif // #if wxUSE_GUI
 
         /** Return plugin's configuration panel for projects.
           * The panel returned from this function will be added in the project's
@@ -121,7 +129,9 @@
           * @param project The project that is being edited.
           * @return A pointer to the plugin's cbConfigurationPanel. It is deleted by the caller.
           */
+#if wxUSE_GUI
         virtual cbConfigurationPanel* GetProjectConfigurationPanel(cb_optional wxWindow* parent, cb_optional cbProject* project){ return nullptr; }
+#endif // #if wxUSE_GUI
 
         /** This method is called by Code::Blocks and is used by the plugin
           * to add any menu items it needs on Code::Blocks's menu bar.\n
@@ -134,7 +144,9 @@
           *
           * @param menuBar the wxMenuBar to create items in
           */
+#if wxUSE_GUI
         virtual void BuildMenu(cb_optional wxMenuBar* menuBar) {}
+#endif // #if wxUSE_GUI
 
         /** This method is called by Code::Blocks core modules (EditorManager,
           * ProjectManager etc) and is used by the plugin to add any menu
@@ -151,7 +163,9 @@
           * @param menu pointer to the popup menu
           * @param data pointer to FileTreeData object (to access/modify the file tree)
           */
+#if wxUSE_GUI
         virtual void BuildModuleMenu(cb_optional const ModuleType type, cb_optional wxMenu* menu, cb_optional const FileTreeData* data = nullptr) { }
+#endif // #if wxUSE_GUI
 
         /** This method is called by Code::Blocks and is used by the plugin
           * to add any toolbar items it needs on Code::Blocks's toolbar.\n
@@ -161,7 +175,9 @@
           * @param toolBar the wxToolBar to create items on
           * @return The plugin should return true if it needed the toolbar, false if not
           */
+#if wxUSE_GUI
         virtual bool BuildToolBar(cb_optional wxToolBar* toolBar ) { return false; }
+#endif // #if wxUSE_GUI
 
         /** This method return the priority of the plugin's toolbar, the less value
           * indicates a more preceding position when C::B starts with no configuration file
@@ -371,6 +387,7 @@
 
 class wxScintillaEvent;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 struct cbDebuggerFeature
 {
     enum Flags
@@ -402,6 +419,7 @@
         virtual void OnAttach();
         virtual void OnRelease(bool appShutDown);
 
+#if wxUSE_GUI
         virtual void BuildMenu(wxMenuBar* menuBar);
         virtual void BuildModuleMenu(const ModuleType type, wxMenu* menu, const FileTreeData* data = nullptr);
         virtual bool BuildToolBar(wxToolBar* toolBar);
@@ -415,6 +433,7 @@
           *              lines were added. If it's a negative number, lines were removed.
           */
         virtual void EditorLinesAddedOrRemoved(cbEditor* editor, int startline, int lines);
+#endif // #if wxUSE_GUI
     public:
         virtual void OnAttachReal() = 0;
         virtual void OnReleaseReal(bool appShutDown) = 0;
@@ -650,6 +669,7 @@
         bool m_lastLineWasNormal;
         wxString m_guiName, m_settingsName;
 };
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 /** @brief Base class for tool plugins
   *
@@ -671,12 +691,14 @@
           */
         virtual int Execute() = 0;
     private:
+#if wxUSE_GUI
         // "Hide" some virtual members, that are not needed in cbToolPlugin
         void BuildMenu(cb_unused wxMenuBar* menuBar){}
         void RemoveMenu(cb_unused wxMenuBar* menuBar){}
         void BuildModuleMenu(cb_unused const ModuleType type, cb_unused wxMenu* menu, cb_unused const FileTreeData* data = nullptr){}
         bool BuildToolBar(cb_unused wxToolBar* toolBar){ return false; }
         void RemoveToolBar(cb_unused wxToolBar* toolBar){}
+#endif // #if wxUSE_GUI
 };
 
 /** @brief Base class for mime plugins
@@ -716,12 +738,14 @@
           */
         virtual bool HandlesEverything() const = 0;
     private:
+#if wxUSE_GUI
         // "Hide" some virtual members, that are not needed in cbMimePlugin
         void BuildMenu(cb_unused wxMenuBar* menuBar){}
         void RemoveMenu(cb_unused wxMenuBar* menuBar){}
         void BuildModuleMenu(cb_unused const ModuleType type, cb_unused wxMenu* menu, cb_unused const FileTreeData* data = nullptr){}
         bool BuildToolBar(cb_unused wxToolBar* toolBar){ return false; }
         void RemoveToolBar(cb_unused wxToolBar* toolBar){}
+#endif // #if wxUSE_GUI
 };
 
 class wxHtmlLinkEvent;
@@ -819,7 +843,9 @@
           * @param ed The editor being checked.
           * @return The level of functionality this plugin is able to supply.
           */
+#if wxUSE_GUI
         virtual CCProviderStatus GetProviderStatusFor(cbEditor* ed) = 0;
+#endif // #if wxUSE_GUI
 
         /** @brief Supply content for the autocompletion list.
           *
@@ -840,7 +866,9 @@
           *                       plugin is allowed to change this (but it is not recommended).
           * @return Completable tokens, or empty vector to cancel autocompletion.
           */
+#if wxUSE_GUI
         virtual std::vector<CCToken> GetAutocompList(bool isAuto, cbEditor* ed, int& tknStart, int& tknEnd) = 0;
+#endif // #if wxUSE_GUI
 
         /** @brief Supply html formatted documentation for the passed token.
           *
@@ -873,7 +901,9 @@
           * @return Each entry in this vector is guaranteed either a new line or a separate page in the calltip.
           *         CCManager will decide if lines should be further split (for formatting to fit the monitor).
           */
+#if wxUSE_GUI
         virtual std::vector<CCCallTip> GetCallTips(int pos, int style, cbEditor* ed, int& argsPos) = 0;
+#endif // #if wxUSE_GUI
 
         /** @brief Supply the definition of the token at the specified location.
           *
@@ -885,7 +915,9 @@
           *                          function are unsuitable/empty. True by default.
           * @return A list of the token(s) that match the specified location, an empty vector if none.
           */
+#if wxUSE_GUI
         virtual std::vector<CCToken> GetTokenAt(int pos, cbEditor* ed, bool& allowCallTip) = 0;
+#endif // #if wxUSE_GUI
 
         /** @brief Callback to handle a click on a link in the documentation popup.
          *
@@ -906,7 +938,9 @@
           * @param token The CCToken corresponding to the selected entry.
           * @param ed The editor to operate in.
           */
+#if wxUSE_GUI
         virtual void DoAutocomplete(const CCToken& token, cbEditor* ed);
+#endif // #if wxUSE_GUI
 
         /** @brief Callback for inserting the selected autocomplete entry into the editor.
           *
@@ -918,7 +952,9 @@
           * @param token A string corresponding to the selected entry.
           * @param ed The editor to operate in.
           */
+#if wxUSE_GUI
         virtual void DoAutocomplete(const wxString& token, cbEditor* ed);
+#endif // #if wxUSE_GUI
 
     protected:
         /** @brief Has this plugin been selected to provide content for the editor.
@@ -928,7 +964,9 @@
           * @param ed The editor to check.
           * @return Is provider for the editor.
           */
+#if wxUSE_GUI
         bool IsProviderFor(cbEditor* ed);
+#endif // #if wxUSE_GUI
 };
 
 /** @brief Base class for wizard plugins
@@ -965,9 +1003,11 @@
           * @return the template's category (GUI, Console, etc; free-form text). Try to adhere to standard category names... */
         virtual wxString GetCategory(int index) const = 0;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** @param index the wizard index.
           * @return the template's bitmap */
         virtual const wxBitmap& GetBitmap(int index) const = 0;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         /** @param index the wizard index.
           * @return this wizard's script filename (if this wizard is scripted). */
@@ -984,12 +1024,14 @@
           * You should dynamic-cast this to the correct type based on GetOutputType() 's value. */
         virtual CompileTargetBase* Launch(int index, wxString* createdFilename = nullptr) = 0; // do your work ;)
     private:
+#if wxUSE_GUI
         // "Hide" some virtual members, that are not needed in cbCreateWizardPlugin
         void BuildMenu(cb_unused wxMenuBar* menuBar){}
         void RemoveMenu(cb_unused wxMenuBar* menuBar){}
         void BuildModuleMenu(cb_unused const ModuleType type, cb_unused wxMenu* menu, cb_unused const FileTreeData* data = nullptr){}
         bool BuildToolBar(cb_unused wxToolBar* toolBar){ return false; }
         void RemoveToolBar(cb_unused wxToolBar* toolBar){}
+#endif // #if wxUSE_GUI
 };
 
 /** @brief Base class for SmartIndent plugins
@@ -998,6 +1040,7 @@
   * These plugins don't eat processing time after startup when they are not active.
   * The hook gets installed during OnAttach.
   */
+#if wxUSE_GUI
 class cbStyledTextCtrl;
 class cbSmartIndentPlugin : public cbPlugin
 {
@@ -1058,6 +1094,7 @@
     private:
         int m_FunctorId;
 };
+#endif // #if wxUSE_GUI
 
 /** @brief Plugin registration object.
   *
Index: src/include/cbproject.h
===================================================================
--- src/include/cbproject.h	(revision 9855)
+++ src/include/cbproject.h	(working copy)
@@ -9,10 +9,15 @@
 #include <wx/datetime.h>
 #include <wx/dynarray.h>
 #include <wx/hashmap.h>
+
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/treectrl.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 #include "settings.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "misctreeitemdata.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "compiletargetbase.h"
 #include "cbplugin.h"
 #include "projectbuildtarget.h"
@@ -34,6 +39,7 @@
 
 typedef std::map<wxString, wxArrayString> VirtualBuildTargetsMap;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class DLLIMPORT FileTreeData : public MiscTreeItemData
 {
     public:
@@ -75,6 +81,7 @@
         wxString m_folder;
         FileTreeDataKind m_kind;
 };
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 /** Precompiled headers mode.
   * Defines where and how are the project's precompiled headers generated.
@@ -217,6 +224,7 @@
           */
         ProjectBuildTarget* AddBuildTarget(const wxString& targetName);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** Rename a build target.
           * @param index The build target's index to rename.
           * @param targetName The new name for the build target.
@@ -285,6 +293,7 @@
           * The number of array elements must be equal to GetBuildTargetsCount().
           */
         void ReOrderTargets(const wxArrayString& nameOrder);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         /** Set the active build target.
           * @param name The build target name to set as active. If @c name does
@@ -307,6 +316,7 @@
 
         void SetCompilerID(const wxString& id); // overriden
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** @return The root item of this project in the project manager's tree. */
         wxTreeItemId GetProjectNode(){ return m_ProjectNode; }
 
@@ -354,6 +364,7 @@
           * @return True if successful, false otherwise.
           */
         bool LoadLayout();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         /** Notify that file(s) will be added shortly.
           * This function should be called before calling AddFile().
@@ -439,6 +450,7 @@
         */
         std::vector<Glob> GetGlobs() const;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** Convenience function for remembering the project's tree state when refreshing it.
           * @return An array of strings containing the tree-path names of expanded nodes.
           */
@@ -459,6 +471,7 @@
           * @param tree The tree control to restore its expanded state to a previously saved.
           */
         void RestoreTreeState(wxTreeCtrl* tree);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         /** Displays a target selection dialog.
           * When invoked, a selection dialog is presented to the user so that he/she
@@ -591,6 +604,7 @@
           */
         bool GetExtendedObjectNamesGeneration() const;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** Set notes on the project.
           *
           * @param notes Simple text notes about the project.
@@ -623,6 +637,7 @@
           * @note If @c editable is true, the @c nonEmptyOnly parameter is ignored...
           */
         void ShowNotes(bool nonEmptyOnly, bool editable = false);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         /** Changes project title
           *
@@ -677,7 +692,9 @@
         void ExpandVirtualBuildTargetGroup(const wxString& alias, wxArrayString& result) const;
         ProjectBuildTarget* AddDefaultBuildTarget();
         int IndexOfBuildTargetName(const wxString& targetName) const;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         wxString CreateUniqueFilename();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void NotifyPlugins(wxEventType type, const wxString& targetName = wxEmptyString, const wxString& oldTargetName = wxEmptyString);
 
         // properties
@@ -696,7 +713,9 @@
         wxArrayString     m_ExpandedNodes;
         wxArrayString     m_SelectedNodes;
         bool              m_Loaded;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         wxTreeItemId      m_ProjectNode;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         wxArrayString m_VirtualFolders; // not saved, just used throughout cbProject's lifetime
 
Index: src/include/cbworkspace.h
===================================================================
--- src/include/cbworkspace.h	(revision 9855)
+++ src/include/cbworkspace.h	(working copy)
@@ -36,6 +36,7 @@
         /** @brief Destructor */
         virtual ~cbWorkspace();
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** @brief Save the workspace
           *
           * @param force If false (the default), the workspace will not be written to disk,
@@ -52,6 +53,7 @@
           * the filename to save will be displayed.
           */
         virtual bool SaveAs(const wxString& filename);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         /** @brief Get the workspace file's name
           *
@@ -92,6 +94,7 @@
           */
         virtual bool IsDefault() const { return m_IsDefault; }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** @brief Is this workspace modified?
           *
           * @return True if the workspace is modified, false if not.
@@ -107,6 +110,7 @@
           * false, the workspace will be marked as unmodified.
           */
         virtual void SetModified(bool modified);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         /** @brief Set the preferred target for this workspace
           */
Index: src/include/configmanager.h
===================================================================
--- src/include/configmanager.h	(revision 9855)
+++ src/include/configmanager.h	(working copy)
@@ -256,9 +256,11 @@
     void WriteBinary(const wxString& name,  void* ptr, size_t len);
     wxString ReadBinary(const wxString& name);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     void Write(const wxString& name,  const wxColour& c);
     bool Read(const wxString& name, wxColour* value);
     wxColour ReadColour(const wxString& name, const wxColour& defaultVal = *wxBLACK);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 
     /* -----------------------------------------------------------------------------------------------------
Index: src/include/globals.h
===================================================================
--- src/include/globals.h	(revision 9855)
+++ src/include/globals.h	(working copy)
@@ -9,12 +9,18 @@
 #include <vector>
 
 #include <wx/string.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/treectrl.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/file.h>
 #include <wx/filename.h>
 #include <wx/intl.h>
+#if wxUSE_GUI
 #include <wx/msgdlg.h>
 #include <wx/bitmap.h>
+#else // #if wxUSE_GUI
+#include <wx/event.h>
+#endif // #if wxUSE_GUI
 
 #include "settings.h"
 
@@ -109,6 +114,7 @@
     fvsLast
 };
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class DLLIMPORT cbProjectTreeImages
 {
     public:
@@ -139,6 +145,7 @@
     ptvsHideFolderName = 0x04, //!< If true, the folder name will be hidden and only the file name will be shown (not compatible with "use folders")
     ptvsDefault        = 0x03  //!< Just here for convenience, "categorise" + "use folders" ON
 };
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 /** Template output types. */
 enum TemplateOutputType
@@ -218,17 +225,21 @@
 extern DLLIMPORT FileType FileTypeOf(const wxString& filename);
 extern DLLIMPORT wxString cbFindFileInPATH(const wxString &filename);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 extern DLLIMPORT void SaveTreeState(wxTreeCtrl* tree, const wxTreeItemId& parent, wxArrayString& nodePaths, wxArrayString& selectedItemPaths);
 extern DLLIMPORT void RestoreTreeState(wxTreeCtrl* tree, const wxTreeItemId& parent, wxArrayString& nodePaths, wxArrayString& selectedItemPaths);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 extern DLLIMPORT bool CreateDirRecursively(const wxString& full_path, int perms = 0755);
 extern DLLIMPORT bool CreateDir(const wxString& full_path, int perms = 0755);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 extern DLLIMPORT wxString ChooseDirectory(wxWindow* parent,
                                           const wxString& message = _("Select directory"),
                                           const wxString& initialPath = _T(""),
                                           const wxString& basePath = _T(""),
                                           bool askToMakeRelative = false, // relative to basePath
                                           bool showCreateDirButton = false); // where supported
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 extern DLLIMPORT bool NormalizePath(wxFileName& f,const wxString& base);
 extern DLLIMPORT bool IsSuffixOfPath(wxFileName const & suffix, wxFileName const & path);
@@ -243,6 +254,7 @@
 
 extern DLLIMPORT wxString ExpandBackticks(wxString &str);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 /** This function creates a new wxMenu object on the heap and recursively
   * copies a given menu into it.
   *
@@ -316,14 +328,20 @@
 };
 
 extern DLLIMPORT void PlaceWindow(wxTopLevelWindow *w, cbPlaceDialogMode mode = pdlBest, bool enforce = false);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+
 /** wxMessageBox wrapper.
   *
   * Use this instead of wxMessageBox(), as this uses PlaceWindow() to show it in the correct monitor.
   * @note The return value for wxOK would be wxID_OK and so on for other buttons.
   * So, read wxMessageDialog 's documentation, *not* wxMessageBox 's...
   */
+#if wxUSE_GUI
 extern DLLIMPORT int cbMessageBox(const wxString& message, const wxString& caption = wxEmptyString, int style = wxOK, wxWindow *parent = NULL, int x = -1, int y = -1);
+#else // #if wxUSE_GUI
+extern DLLIMPORT int cbMessageBox(const wxString& message, const wxString& caption = wxEmptyString, int style = wxOK, wxEvtHandler *parent = NULL, int x = -1, int y = -1);
+#endif // #if wxUSE_GUI
 
 inline void NotifyMissingFile(const wxString &name)
 {
Index: src/include/ibaseloader.h
===================================================================
--- src/include/ibaseloader.h	(revision 9855)
+++ src/include/ibaseloader.h	(working copy)
@@ -24,10 +24,12 @@
           * @return True on success, false on failure. */
         virtual bool Open(const wxString& filename) = 0;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** Save a file.
           * @param filename The file to save.
           * @return True on success, false on failure. */
         virtual bool Save(const wxString& filename) = 0;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 };
 
 #endif // IBASELOADER_H
Index: src/include/infowindow.h
===================================================================
--- src/include/infowindow.h	(revision 9855)
+++ src/include/infowindow.h	(working copy)
@@ -18,6 +18,10 @@
 #ifndef INFOWINDOW_H
 #define INFOWINDOW_H
 
+#if !(wxUSE_GUI) || defined(CB_FOR_CONSOLE)
+    #include "infowindow_base.h"
+#else // #if !(wxUSE_GUI) || defined(CB_FOR_CONSOLE)
+
 #include <wx/event.h>
 #include <wx/timer.h>
 #include <wx/string.h>
@@ -59,4 +63,6 @@
         DECLARE_EVENT_TABLE()
 };
 
+#endif // #if !(wxUSE_GUI) || defined(CB_FOR_CONSOLE)
+
 #endif
Index: src/include/logger.h
===================================================================
--- src/include/logger.h	(revision 9855)
+++ src/include/logger.h	(working copy)
@@ -10,8 +10,10 @@
 #include <wx/string.h>
 #include "settings.h" // DLLIMPORT
 
+#if wxUSE_GUI
 class wxMenu;
 class wxWindow;
+#endif // #if wxUSE_GUI
 
 namespace
 {
@@ -64,11 +66,16 @@
     virtual void      CopyContentsToClipboard(cb_optional bool selectionOnly = false) {}
 
     virtual void      UpdateSettings() {}
+
+#if wxUSE_GUI
     virtual wxWindow* CreateControl(cb_optional wxWindow* parent) { return nullptr; }
+#endif // #if wxUSE_GUI
 
     virtual bool      GetWrapMode() const { return false; }
     virtual bool      HasFeature(cb_optional Feature::Enum feature) const { return false; }
+#if wxUSE_GUI
     virtual void      AppendAdditionalMenuItems(cb_optional wxMenu &menu) {}
+#endif // #if wxUSE_GUI
 };
 
 #endif
Index: src/include/loggers.h
===================================================================
--- src/include/loggers.h	(revision 9855)
+++ src/include/loggers.h	(working copy)
@@ -11,7 +11,9 @@
 #include <wx/colour.h>
 #include <wx/font.h>
 #include <wx/ffile.h>
+#if wxUSE_GUI
 #include <wx/textctrl.h>
+#endif // #if wxUSE_GUI
 
 class wxListCtrl;
 
@@ -86,6 +88,7 @@
     virtual void Close();
 };
 
+#if wxUSE_GUI
 /** a logger which prints messages to a wxTextCtrl */
 class DLLIMPORT TextCtrlLogger : public Logger
 {
@@ -115,7 +118,9 @@
 public:
     virtual void Append(const wxString& msg, Logger::level lv = info);
 };
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 /** a logger which prints messages to a wxListCtrl */
 class DLLIMPORT ListCtrlLogger : public Logger
 {
@@ -148,5 +153,6 @@
     virtual wxWindow* CreateControl(wxWindow* parent);
     virtual bool      HasFeature(Feature::Enum feature) const;
 };
+#endif // #if wxUSE_GUI
 
 #endif // LOGGERS_H
Index: src/include/logmanager.h
===================================================================
--- src/include/logmanager.h	(revision 9855)
+++ src/include/logmanager.h	(working copy)
@@ -37,7 +37,9 @@
 
     Logger*   log;
     size_t    index;
+#if wxUSE_GUI
     wxBitmap* icon;
+#endif // #if wxUSE_GUI
     wxString  title;
 
     LogSlot();
Index: src/include/macrosmanager.h
===================================================================
--- src/include/macrosmanager.h	(revision 9855)
+++ src/include/macrosmanager.h	(working copy)
@@ -12,10 +12,14 @@
 #include <wx/filename.h>
 
 // forward decls;
+#if wxUSE_GUI
 class wxMenuBar;
+#endif // #if wxUSE_GUI
 class cbProject;
 class ProjectBuildTarget;
+#if wxUSE_GUI
 class EditorBase;
+#endif // #if wxUSE_GUI
 class UserVariableManager;
 
 WX_DECLARE_STRING_HASH_MAP( wxString, MacrosMap );
@@ -25,8 +29,10 @@
 public:
     friend class Manager;
     friend class Mgr<MacrosManager>;
+#if wxUSE_GUI
     void CreateMenu(wxMenuBar* menuBar);
     void ReleaseMenu(wxMenuBar* menuBar);
+#endif // #if wxUSE_GUI
     void ReplaceMacros(wxString& buffer, ProjectBuildTarget* target = nullptr, bool subrequest = false);
     wxString ReplaceMacros(const wxString& buffer, ProjectBuildTarget* target = nullptr);
     void ReplaceEnvVars(wxString& buffer) { ReplaceMacros(buffer); }  /* misnomer, should be ReplaceVariables */;
Index: src/include/manager.h
===================================================================
--- src/include/manager.h	(revision 9855)
+++ src/include/manager.h	(working copy)
@@ -22,31 +22,43 @@
 #include "cbfunctor.h"
 
 // forward decls
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class wxFrame;
 class wxWindow;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class ProjectManager;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class EditorManager;
 class DebuggerManager;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class LogManager;
 class PluginManager;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class ToolsManager;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class MacrosManager;
 class PersonalityManager;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class wxMenu;
 class wxMenuBar;
 class wxToolBar;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class UserVariableManager;
 class ScriptingManager;
 class ConfigManager;
 class FileManager;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class ColourManager;
 class CCManager;
 class cbSearchResultsLog;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 
 class DLLIMPORT Manager
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     wxFrame*               m_pAppWindow;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     static bool            m_AppShuttingDown;
     static bool            m_AppStartedUp;
     static bool            m_BlockYields;
@@ -73,7 +85,9 @@
     bool ProcessEvent(CodeBlocksEvent&       event);
     bool ProcessEvent(CodeBlocksDockEvent&   event);
     bool ProcessEvent(CodeBlocksLayoutEvent& event);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     bool ProcessEvent(CodeBlocksLogEvent&    event);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 
     /** Use Manager::Get() to get a pointer to its instance
@@ -84,8 +98,10 @@
     /** Never, EVER, call this function! It is the last function called on shutdown.... */
     static void Free();
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     wxFrame*  GetAppFrame()  const;
     wxWindow* GetAppWindow() const;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     static bool IsAppShuttingDown();
     static bool IsAppStartedUp();
@@ -111,21 +127,26 @@
      */
 
     ProjectManager*      GetProjectManager()                          const;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     EditorManager*       GetEditorManager()                           const;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     LogManager*          GetLogManager()                              const;
     PluginManager*       GetPluginManager()                           const;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     ToolsManager*        GetToolsManager()                            const;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     MacrosManager*       GetMacrosManager()                           const;
     PersonalityManager*  GetPersonalityManager()                      const;
     UserVariableManager* GetUserVariableManager()                     const;
     ScriptingManager*    GetScriptingManager()                        const;
     ConfigManager*       GetConfigManager(const wxString& name_space) const;
     FileManager*         GetFileManager()                             const;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     DebuggerManager*     GetDebuggerManager()                         const;
     ColourManager*       GetColourManager()                           const;
     CCManager*           GetCCManager()                               const;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
-
     /////// XML Resource functions ///////
     /// Inits XML Resource system
     static void InitXRC(bool force=false);
@@ -133,6 +154,7 @@
     static void LoadXRC(wxString relpath);
     static bool LoadResource(const wxString& file);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     /// Loads Menubar from XRC
     static wxMenuBar* LoadMenuBar(wxString resid, bool createonfailure = false);
     /// Loads Menu from XRC
@@ -146,6 +168,7 @@
     wxToolBar* CreateEmptyToolbar();
     static void AddonToolBar(wxToolBar* toolBar,wxString resid);
     static bool isToolBar16x16(wxToolBar* toolBar);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     static wxCmdLineParser* GetCmdLineParser();
 
@@ -153,13 +176,17 @@
     void RegisterEventSink(wxEventType eventType, IEventFunctorBase<CodeBlocksEvent>*       functor);
     void RegisterEventSink(wxEventType eventType, IEventFunctorBase<CodeBlocksDockEvent>*   functor);
     void RegisterEventSink(wxEventType eventType, IEventFunctorBase<CodeBlocksLayoutEvent>* functor);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     void RegisterEventSink(wxEventType eventType, IEventFunctorBase<CodeBlocksLogEvent>*    functor);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     void RemoveAllEventSinksFor(void* owner);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     /// Returns pointer to the search result logger, might be nullptr or hidden.
     cbSearchResultsLog* GetSearchResultLogger() const { return m_SearchResultLog; }
     /// Sets the pointer to the search result logger, users must not call this method.
     void SetSearchResultLogger(cbSearchResultsLog *log) { m_SearchResultLog = log; }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 private:
     // event sinks
@@ -169,14 +196,18 @@
     typedef std::map< wxEventType, DockEventSinksArray >             DockEventSinksMap;
     typedef std::vector< IEventFunctorBase<CodeBlocksLayoutEvent>* > LayoutEventSinksArray;
     typedef std::map< wxEventType, LayoutEventSinksArray >           LayoutEventSinksMap;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     typedef std::vector< IEventFunctorBase<CodeBlocksLogEvent>* >    LogEventSinksArray;
     typedef std::map< wxEventType, LogEventSinksArray >              LogEventSinksMap;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     EventSinksMap       m_EventSinks;
     DockEventSinksMap   m_DockEventSinks;
     LayoutEventSinksMap m_LayoutEventSinks;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     LogEventSinksMap    m_LogEventSinks;
     cbSearchResultsLog *m_SearchResultLog;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 };
 
 template <class MgrT> class Mgr
Index: src/include/pluginmanager.h
===================================================================
--- src/include/pluginmanager.h	(revision 9855)
+++ src/include/pluginmanager.h	(working copy)
@@ -6,6 +6,10 @@
 #ifndef PLUGINMANAGER_H
 #define PLUGINMANAGER_H
 
+#include "pluginmanager_base.h"
+
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+
 #include <vector>
 #include <map>
 #include <set>
@@ -22,11 +26,15 @@
 class cbConfigurationPanel;
 class cbProject;
 class wxDynamicLibrary;
+#if wxUSE_GUI
 class wxMenuBar;
 class wxMenu;
+#endif // #if wxUSE_GUI
 class CodeBlocksEvent;
 class TiXmlDocument;
+#if wxUSE_GUI
 class FileTreeData;
+#endif // #if wxUSE_GUI
 
 // typedefs for plugins' function pointers
 typedef void(*PluginSDKVersionProc)(int*,int*,int*);
@@ -182,4 +189,6 @@
         DECLARE_EVENT_TABLE()
 };
 
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+
 #endif // PLUGINMANAGER_H
Index: src/include/projectbuildtarget.h
===================================================================
--- src/include/projectbuildtarget.h	(revision 9855)
+++ src/include/projectbuildtarget.h	(working copy)
@@ -13,7 +13,9 @@
 #include <wx/dynarray.h>
 #include <wx/filename.h>
 #include <wx/list.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/treectrl.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 class cbProject;
 class ProjectBuildTarget;
Index: src/include/projectfile.h
===================================================================
--- src/include/projectfile.h	(revision 9855)
+++ src/include/projectfile.h	(working copy)
@@ -13,7 +13,9 @@
 #include "prep.h"
 #include <wx/dynarray.h>
 #include <wx/filename.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/treectrl.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/hashset.h>
 
 class cbProject;
@@ -72,11 +74,13 @@
          * targets this file belongs to. */
         const wxArrayString& GetBuildTargets() const;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** Show the file properties dialog.
           * @param parent The parent window for the dialog (can be NULL).
           * @return True if the user closed the dialog with "OK", false if closed it with "Cancel".
           */
         bool ShowOptions(wxWindow* parent);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         // take as example the relative file sdk/cbProject.cpp
         /** @return The relative (to the project) filename without extension. */
@@ -101,12 +105,14 @@
           * @return The details for this project file for the specified build target. */
         const pfDetails& GetFileDetails(ProjectBuildTarget* target);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** Set the visual state (modified, read-only, etc).
           * @param state The new visual state. */
         void SetFileState(FileVisualState state);
 
         /** @return The visual state (modified, read-only, etc). */
         FileVisualState GetFileState() const;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         /** Modify 'Use custom command to build this file' for a compilerId. */
         void SetUseCustomBuildCommand(const wxString& compilerId, bool useCustomBuildCommand);
@@ -206,11 +212,13 @@
         /** Auto-generated files when compiling this file */
         ProjectFilesVector generatedFiles;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** Returns the wxTreeItemId for the file */
         const wxTreeItemId& GetTreeItemId() const { return m_TreeItemId; }
 
         /** Sets the tree item id for the file. Should not be called by users! */
         void SetTreeItemId(wxTreeItemId id) { m_TreeItemId = id; }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         /** Compare relative names of projectfiles.
           * Static helper function to sort array of projectfiles.
@@ -226,7 +234,9 @@
         void DoUpdateFileDetails(ProjectBuildTarget* target);
         cbProject* project;
         FileVisualState m_VisualState;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         wxTreeItemId m_TreeItemId; // set by the project when building the tree
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         wxString m_ObjName;
         PFDMap m_PFDMap;
 };
Index: src/include/projectloader.h
===================================================================
--- src/include/projectloader.h	(revision 9855)
+++ src/include/projectloader.h	(working copy)
@@ -33,10 +33,12 @@
           * @return True on success, false on failure. */
         bool Open(const wxString& filename);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** Save a file.
           * @param filename The file to save.
           * @return True on success, false on failure. */
         bool Save(const wxString& filename);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         /** Open a file.
           * This version of Open, will return a copy of the \<Extensions\> element (if found).
@@ -46,6 +48,7 @@
           * @return True on success, false on failure. */
         bool Open(const wxString& filename, TiXmlElement** ppExtensions);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** Save a file.
           * This version of Save, can override the \<Extensions\> element.
           * @param filename The file to save.
@@ -62,6 +65,7 @@
           * @param onlyTarget The target name. If empty, it's like saving the project under a different name
           * (i.e. all targets are exported to the new project). */
         bool ExportTargetAsProject(const wxString& filename, const wxString& onlyTarget, TiXmlElement* pExtensions);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         /** @return True if the file was upgraded after load, false if not. */
         bool FileUpgraded(){ return m_Upgraded; }
Index: src/include/projectmanager.h
===================================================================
--- src/include/projectmanager.h	(revision 9855)
+++ src/include/projectmanager.h	(working copy)
@@ -13,16 +13,22 @@
 #include <wx/event.h>
 #include <wx/dynarray.h>
 #include <wx/hashmap.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/treectrl.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 #include "cbexception.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "cbtreectrl.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "settings.h"
 #include "manager.h"
 
 // forward decls
 class cbProject;
+#if wxUSE_GUI
 class EditorBase;
+#endif // #if wxUSE_GUI
 class ProjectFile;
 class FilesGroupsAndMasks;
 class cbWorkspace;
@@ -37,7 +43,11 @@
     public:
         virtual ~cbProjectManagerUI() {}
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         virtual cbAuiNotebook* GetNotebook() = 0;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** Retrieve a pointer to the project manager's tree (GUI).
           * @return A pointer to a wxTreeCtrl window.
           */
@@ -69,6 +79,7 @@
           * @return A wxTreeItemId of the selected tree item.
           */
         virtual wxTreeItemId GetTreeSelection() = 0;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         virtual void ShowFileInTree(ProjectFile &projectFile) = 0;
 
@@ -79,6 +90,7 @@
         virtual void FinishLoadingProject(cbProject *project, bool newAddition, FilesGroupsAndMasks* fileGroups) = 0;
         virtual void FinishLoadingWorkspace(cbProject *activeProject, const wxString &workspaceTitle) = 0;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** Checks whether all projects are saved. If not, asks
           *  the user to save and saves accordingly.
           *  @return False if the user pressed cancel.
@@ -125,6 +137,7 @@
 
         /** Switches the management's notebook to the Projects tab */
         virtual void SwitchToProjectsPage() = 0;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 };
 
 
@@ -201,6 +214,7 @@
           */
         cbProject* LoadProject(const wxString& filename, bool activateIt = true);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         /** Reloads a project and tries to keep everything the same (project order, dependencies, active project)
           * @param project the project that will be reloaded, the pointer will be invalid after the call.
           */
@@ -233,6 +247,8 @@
           * @return True if all projects were saved, false if even one save operation failed.
           */
         bool SaveAllProjects();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+
         /** Close a project.
           * @param project A pointer to the project to close.
           * @param dontsave Force not (!) saving the project on close.
Index: src/include/scripting/bindings/sc_base_types.h
===================================================================
--- src/include/scripting/bindings/sc_base_types.h	(revision 9855)
+++ src/include/scripting/bindings/sc_base_types.h	(working copy)
@@ -14,7 +14,9 @@
 #include <manager.h>
 #include <logmanager.h>
 #include <configmanager.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <editormanager.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <projectmanager.h>
 #include <macrosmanager.h>
 #include <uservarmanager.h>
@@ -23,24 +25,34 @@
 #include <compilerfactory.h>
 #include <compiletargetbase.h>
 #include <cbproject.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <cbeditor.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <sqplus.h>
 
 // wx primitives and types
 DECLARE_INSTANCE_TYPE(wxArrayString);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_INSTANCE_TYPE(wxColour);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_INSTANCE_TYPE(wxFileName);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_INSTANCE_TYPE(wxPoint);
 DECLARE_INSTANCE_TYPE(wxSize);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_INSTANCE_TYPE(wxString);
 
 // C::B primitives and types
 DECLARE_INSTANCE_TYPE(ConfigManager);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_INSTANCE_TYPE(EditorManager);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_INSTANCE_TYPE(UserVariableManager);
 DECLARE_INSTANCE_TYPE(ScriptingManager);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_INSTANCE_TYPE(EditorBase);
 DECLARE_INSTANCE_TYPE(cbEditor);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_INSTANCE_TYPE(CompileOptionsBase);
 DECLARE_INSTANCE_TYPE(CompileTargetBase);
 DECLARE_INSTANCE_TYPE(ProjectBuildTarget);
@@ -49,7 +61,9 @@
 DECLARE_INSTANCE_TYPE(ProjectManager);
 DECLARE_INSTANCE_TYPE(CompilerFactory);
 DECLARE_INSTANCE_TYPE(PluginInfo);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_INSTANCE_TYPE(FileTreeData);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 using SqPlus::GetTypeName;
 
 // make SqPlus aware of enum-type arguments
@@ -63,7 +77,9 @@
 
 DECLARE_ENUM_TYPE(wxPathFormat);
 DECLARE_ENUM_TYPE(wxPathNormalize);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_ENUM_TYPE(PrintColourMode);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_ENUM_TYPE(OptionsRelation);
 DECLARE_ENUM_TYPE(OptionsRelationType);
 DECLARE_ENUM_TYPE(TargetType);
@@ -72,7 +88,9 @@
 DECLARE_ENUM_TYPE(TemplateOutputType);
 DECLARE_ENUM_TYPE(SearchDirs);
 DECLARE_ENUM_TYPE(ModuleType);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_ENUM_TYPE(FileTreeData::FileTreeDataKind);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DECLARE_ENUM_TYPE(TargetFilenameGenerationPolicy);
 using SqPlus::Push;
 
Index: src/include/scriptingmanager.h
===================================================================
--- src/include/scriptingmanager.h	(revision 9855)
+++ src/include/scriptingmanager.h	(working copy)
@@ -6,6 +6,10 @@
 #ifndef SCRIPTING_H
 #define SCRIPTING_H
 
+#include "scriptingmanager_base.h"
+
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+
 #include <map>
 #include <set>
 
@@ -16,7 +20,9 @@
 
 #include "settings.h"
 #include "manager.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "menuitemsmanager.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/intl.h>
 
 struct SquirrelError;
@@ -250,9 +256,12 @@
         typedef std::set<wxString> IncludeSet;
         IncludeSet m_IncludeSet;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         MenuItemsManager m_MenuItemsManager;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         DECLARE_EVENT_TABLE()
 };
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 #endif // SCRIPTING_H
Index: src/include/sdk_common.h
===================================================================
--- src/include/sdk_common.h	(revision 9855)
+++ src/include/sdk_common.h	(working copy)
@@ -136,15 +135,19 @@
     // managers
     #include "manager.h"
     #include "configmanager.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "editormanager.h"
+#endif // wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "logmanager.h"
     #include "projectmanager.h"
     #include "menuitemsmanager.h"
     #include "scriptingmanager.h"
     #include "toolsmanager.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "templatemanager.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "macrosmanager.h"
     #include "pluginmanager.h"
     #include "personalitymanager.h"
     #include "uservarmanager.h"
     #include "filemanager.h"
Index: src/include/sdk_events.h
===================================================================
--- src/include/sdk_events.h	(revision 9855)
+++ src/include/sdk_events.h	(working copy)
@@ -12,16 +12,27 @@
 #include "prep.h"
 
 class cbProject;
+#if wxUSE_GUI
 class EditorBase;
+#else // #if wxUSE_GUI
+typedef wxEvtHandler EditorBase;
+#endif // #if wxUSE_GUI
 class cbPlugin;
 class Logger;
 
+#if wxUSE_GUI
+typedef wxCommandEvent CB_EventSuperClass;
+#else
+typedef wxEvent CB_EventSuperClass;
+#endif // #if wxUSE_GUI
+
 /** A generic Code::Blocks event. */
-class EVTIMPORT CodeBlocksEvent : public wxCommandEvent
+class EVTIMPORT CodeBlocksEvent : 
+public CB_EventSuperClass
 {
 	public:
 		CodeBlocksEvent(wxEventType commandType = wxEVT_NULL, int id = 0, cbProject* project = nullptr, EditorBase* editor = nullptr, cbPlugin* plugin = nullptr, EditorBase* old_editor = nullptr)
-			: wxCommandEvent(commandType, id),
+			: CB_EventSuperClass(commandType, id),
 			m_pProject(project),
 			m_pEditor(editor),
 			m_pOldEditor(old_editor),
@@ -29,7 +40,7 @@
 			m_X(0),
 			m_Y(0) {}
 		CodeBlocksEvent(const CodeBlocksEvent& event)
-			: wxCommandEvent(event),
+			: CB_EventSuperClass(event),
 			m_pProject(event.m_pProject),
 			m_pEditor(event.m_pEditor),
 			m_pOldEditor(event.m_pOldEditor),
@@ -96,12 +107,14 @@
         CodeBlocksDockEvent(wxEventType commandType = wxEVT_NULL, int id = 0)
             : wxEvent(id, commandType),
             title(_("Untitled")),
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             pWindow(nullptr),
             desiredSize(100, 100),
             floatingSize(150, 150),
             minimumSize(40, 40),
             floatingPos(200, 150),
             dockSide(dsUndefined),
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             row(-1),
             column(-1),
             shown(false),
@@ -115,12 +128,14 @@
             : wxEvent(rhs),
             name(rhs.name),
             title(rhs.title),
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             pWindow(rhs.pWindow),
             desiredSize(rhs.desiredSize),
             floatingSize(rhs.floatingSize),
             minimumSize(rhs.minimumSize),
             floatingPos(rhs.floatingPos),
             dockSide(rhs.dockSide),
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             row(rhs.row),
             column(rhs.column),
             shown(rhs.shown),
@@ -134,12 +149,14 @@
 
         wxString name;      ///< Dock's name. Must be unique. If empty, a unique name will be assigned.
         wxString title;     ///< Dock's title.
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         wxWindow* pWindow;  ///< The window to dock.
         wxSize desiredSize; ///< The desired size.
         wxSize floatingSize;///< The desired floating size.
         wxSize minimumSize; ///< The minimum allowed size.
         wxPoint floatingPos;///< The desired floating position.
         DockSide dockSide;  ///< The side to dock it.
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         int row;            ///< The row to dock it.
         int column;         ///< The column to dock it.
         bool shown;         ///< If true, initially shown.
@@ -173,6 +190,7 @@
 };
 typedef void (wxEvtHandler::*CodeBlocksLayoutEventFunction)(CodeBlocksLayoutEvent&);
 
+#if wxUSE_GUI
 /** Event used to request from the main app to add a log.
   *
   * @note By adding a Logger*, the app takes ownership of it in cbEVT_ADD_LOG_WINDOW.
@@ -198,6 +216,7 @@
 		DECLARE_DYNAMIC_CLASS(CodeBlocksLogEvent)
 };
 typedef void (wxEvtHandler::*CodeBlocksLogEventFunction)(CodeBlocksLogEvent&);
+#endif // #if wxUSE_GUI
 
 
 // Thread event, this is basically a derived wxCommandEvent but enforce a deep copy of its
@@ -206,19 +225,21 @@
 // new event type like: cbEVT_THREAD_LOG_MESSAGE, cbEVT_THREAD_LOGDEBUG_MESSAGE
 // cbEVT_THREAD_SYSTEM_HEADER_UPDATE.
 
-class CodeBlocksThreadEvent : public wxCommandEvent
+class CodeBlocksThreadEvent : public CB_EventSuperClass
 {
 public:
     CodeBlocksThreadEvent(wxEventType eventType = wxEVT_NULL, int id = wxID_ANY)
-        : wxCommandEvent(eventType,id)
+        : CB_EventSuperClass(eventType,id)
         { }
 
     CodeBlocksThreadEvent(const CodeBlocksThreadEvent& event)
-        : wxCommandEvent(event)
+        : CB_EventSuperClass(event)
     {
         // make sure our string member (which uses COW, aka refcounting) is not
         // shared by other wxString instances:
+#if wxUSE_GUI
         SetString(GetString().c_str());
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     }
 
     virtual wxEvent *Clone() const
Index: src/include/uservarmanager.h
===================================================================
--- src/include/uservarmanager.h	(revision 9855)
+++ src/include/uservarmanager.h	(working copy)
@@ -33,7 +33,9 @@
         void Arrogate();
         bool Exists(const wxString& variable) const;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void Configure();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void Migrate();
 
         UserVariableManager& operator=(cb_unused const UserVariableManager& rhs) // prevent assignment operator
Index: src/plugins/compilergcc/compilerG95.cpp
===================================================================
--- src/plugins/compilergcc/compilerG95.cpp	(revision 9855)
+++ src/plugins/compilergcc/compilerG95.cpp	(working copy)
@@ -11,7 +11,10 @@
 #include <wx/regex.h>
 #include <wx/config.h>
 #include <wx/fileconf.h>
+#if wxUSE_GUI
 #include <wx/msgdlg.h>
+#endif // #if wxUSE_GUI
+#include <wx/utils.h> 
 #include "manager.h"
 #include "logmanager.h"
 
Index: src/plugins/compilergcc/compilerGDC.cpp
===================================================================
--- src/plugins/compilergcc/compilerGDC.cpp	(revision 9855)
+++ src/plugins/compilergcc/compilerGDC.cpp	(working copy)
@@ -14,7 +14,9 @@
 #include <wx/regex.h>
 #include <wx/config.h>
 #include <wx/fileconf.h>
+#if wxUSE_GUI
 #include <wx/msgdlg.h>
+#endif // #if wxUSE_GUI
 #include "manager.h"
 #include "logmanager.h"
 
Index: src/plugins/compilergcc/compilerGNUFortran.cpp
===================================================================
--- src/plugins/compilergcc/compilerGNUFortran.cpp	(revision 9855)
+++ src/plugins/compilergcc/compilerGNUFortran.cpp	(working copy)
@@ -11,7 +11,10 @@
 #include <wx/regex.h>
 #include <wx/config.h>
 #include <wx/fileconf.h>
+#if wxUSE_GUI
 #include <wx/msgdlg.h>
+#endif // #if wxUSE_GUI
+#include <wx/utils.h> 
 #include "manager.h"
 #include "logmanager.h"
 
Index: src/plugins/compilergcc/compilerIAR.cpp
===================================================================
--- src/plugins/compilergcc/compilerIAR.cpp	(revision 9855)
+++ src/plugins/compilergcc/compilerIAR.cpp	(working copy)
@@ -15,7 +15,9 @@
 #include <wx/regex.h>
 #include <wx/config.h>
 #include <wx/fileconf.h>
+#if wxUSE_GUI
 #include <wx/msgdlg.h>
+#endif // #if wxUSE_GUI
 
 #ifdef __WXMSW__
     #include <wx/msw/registry.h>
Index: src/plugins/compilergcc/compilerICC.cpp
===================================================================
--- src/plugins/compilergcc/compilerICC.cpp	(revision 9855)
+++ src/plugins/compilergcc/compilerICC.cpp	(working copy)
@@ -10,7 +10,10 @@
 #include <sdk.h>
 #ifndef CB_PRECOMP
 	#include <wx/intl.h>
-	#include <wx/msgdlg.h>
+#if wxUSE_GUI
+    #include <wx/msgdlg.h>
+#endif // #if wxUSE_GUI
+    #include <wx/utils.h> 
 	#include <wx/regex.h>
 
 	#include "compilerfactory.h"
Index: src/plugins/compilergcc/compilerKeilC51.cpp
===================================================================
--- src/plugins/compilergcc/compilerKeilC51.cpp	(revision 9855)
+++ src/plugins/compilergcc/compilerKeilC51.cpp	(working copy)
@@ -14,7 +14,9 @@
 #include <wx/regex.h>
 #include <wx/config.h>
 #include <wx/fileconf.h>
+#if wxUSE_GUI
 #include <wx/msgdlg.h>
+#endif // #if wxUSE_GUI
 
 #ifdef __WXMSW__
     #include <wx/msw/registry.h>
Index: src/plugins/compilergcc/compilerLCC.cpp
===================================================================
--- src/plugins/compilergcc/compilerLCC.cpp	(revision 9855)
+++ src/plugins/compilergcc/compilerLCC.cpp	(working copy)
@@ -15,7 +15,9 @@
 #include <wx/regex.h>
 #include <wx/config.h>
 #include <wx/fileconf.h>
+#if wxUSE_GUI
 #include <wx/msgdlg.h>
+#endif // #if wxUSE_GUI
 
 #ifdef __WXMSW__
     #include <wx/msw/registry.h>
Index: src/plugins/compilergcc/compilerMINGW.cpp
===================================================================
--- src/plugins/compilergcc/compilerMINGW.cpp	(revision 9855)
+++ src/plugins/compilergcc/compilerMINGW.cpp	(working copy)
@@ -13,7 +13,10 @@
 #include <wx/regex.h>
 #include <wx/config.h>
 #include <wx/fileconf.h>
+#if wxUSE_GUI
 #include <wx/msgdlg.h>
+#endif // #if wxUSE_GUI
+#include <wx/utils.h>
 #include <wx/filename.h>
 #include <wx/filefn.h>
 #include "manager.h"
Index: src/plugins/compilergcc/compilerXML.cpp
===================================================================
--- src/plugins/compilergcc/compilerXML.cpp	(revision 9855)
+++ src/plugins/compilergcc/compilerXML.cpp	(working copy)
@@ -8,6 +8,7 @@
 #include <wx/textfile.h>
 #include <wx/regex.h>
 #include <wx/xml/xml.h>
+#include <wx/utils.h>
 #ifdef __WXMSW__ // for wxRegKey
     #include <wx/msw/registry.h>
 #endif // __WXMSW__
Index: src/plugins/compilergcc/compilererrors.cpp
===================================================================
--- src/plugins/compilergcc/compilererrors.cpp	(revision 9855)
+++ src/plugins/compilergcc/compilererrors.cpp	(working copy)
@@ -9,9 +9,13 @@
 
 #include "sdk.h"
 #ifndef CB_PRECOMP
-    #include "cbeditor.h"
+    #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+        #include "cbeditor.h"
+    #endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "cbproject.h"
-    #include "editormanager.h"
+    #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+        #include "editormanager.h"
+    #endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "manager.h"
     #include "projectfile.h"
     #include "projectmanager.h"
@@ -43,6 +47,7 @@
     DoAddError(err);
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CompilerErrors::GotoError(int nr)
 {
     if (m_Errors.GetCount() == 0 || nr < 0 || nr > (int)m_Errors.GetCount() - 1)
@@ -100,10 +105,13 @@
 
     DoGotoError(m_Errors[m_ErrorIndex]);
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void CompilerErrors::Clear()
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     DoClearErrorMarkFromAllEditors();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_Errors.Clear();
     m_ErrorIndex = -1;
 }
@@ -131,6 +139,7 @@
     return -1;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CompilerErrors::DoGotoError(const CompileError& error)
 {
     if (error.line <= 0)
@@ -237,6 +246,7 @@
 {
     return m_ErrorIndex > 0;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 wxString CompilerErrors::GetErrorString(int index)
 {
Index: src/plugins/compilergcc/compilergcc.cpp
===================================================================
--- src/plugins/compilergcc/compilergcc.cpp	(revision 9855)
+++ src/plugins/compilergcc/compilergcc.cpp	(working copy)
@@ -9,23 +9,33 @@
 
 #include <sdk.h>
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/frame.h> // GetMenuBar
 #include <wx/gauge.h> // Needs to be before compilergcc.h if NOPCH on wxMSW
 #include <wx/listctrl.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#if wxUSE_GUI
 #include <wx/xrc/xmlres.h>
+#endif // #if wxUSE_GUI
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/sizer.h>
 #include <wx/button.h>
 #include <wx/stattext.h>
 #include <wx/statline.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/ffile.h>
 #include <wx/utils.h>
 #include <wx/uri.h>
+
 #include <wx/xml/xml.h>
 
+
 #ifndef CB_PRECOMP
     #include <wx/app.h>
-    #include <wx/textdlg.h>
-    #include <wx/toolbar.h>
+    #if wxUSE_GUI
+        #include <wx/textdlg.h>
+        #include <wx/toolbar.h>
+    #endif // #if wxUSE_GUI
 #endif
 
 #include <prep.h>
@@ -34,27 +44,40 @@
 #include <pipedprocess.h>
 #include <configmanager.h>
 #include <compilercommandgenerator.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <debuggermanager.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <logmanager.h>
 #include <macrosmanager.h>
 #include <projectmanager.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <editormanager.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <scriptingmanager.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <configurationpanel.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <pluginmanager.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <cbeditor.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <annoyingdialog.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <filefilters.h>
 #include <infowindow.h>
 
 #include "compilergcc.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "compileroptionsdlg.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "directcommands.h"
 #include "globals.h"
 #include "cbworkspace.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "cbstyledtextctrl.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
-
 #include "compilerMINGW.h"
 #include "compilerGNUARM.h"
 #include "compilerMSVC.h"
@@ -87,6 +110,7 @@
 
 const int idBuildLog = wxNewId();
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class BuildLogger : public TextCtrlLogger
 {
     wxPanel* panel;
@@ -154,6 +178,7 @@
             wxLaunchDefaultBrowser(url);
     }
 };
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 namespace
 {
@@ -169,8 +194,10 @@
 // just because we don't know other plugins' used identifiers,
 // we use wxNewId() to generate a guaranteed unique ID ;), instead of enum
 // (don't forget that, especially in a plugin)
+#if wxUSE_GUI
 int idTimerPollCompiler                            = XRCID("idTimerPollCompiler");
 int idMenuCompile                                  = XRCID("idCompilerMenuCompile");
+#endif // #if wxUSE_GUI
 int idMenuCompileTarget                            = wxNewId();
 int idMenuCompileFromProjectManager                = wxNewId();
 int idMenuProjectCompilerOptions                   = wxNewId();
@@ -178,29 +205,39 @@
 int idMenuProjectProperties                        = wxNewId();
 int idMenuTargetCompilerOptions                    = wxNewId();
 int idMenuTargetCompilerOptionsSub                 = wxNewId();
+#if wxUSE_GUI
 int idMenuCompileFile                              = XRCID("idCompilerMenuCompileFile");
+#endif // #if wxUSE_GUI
 int idMenuCompileFileFromProjectManager            = wxNewId();
 int idMenuCleanFileFromProjectManager              = wxNewId();
+#if wxUSE_GUI
 int idMenuRebuild                                  = XRCID("idCompilerMenuRebuild");
+#endif // #if wxUSE_GUI
 int idMenuRebuildTarget                            = wxNewId();
 int idMenuRebuildFromProjectManager                = wxNewId();
+#if wxUSE_GUI
 int idMenuClean                                    = XRCID("idCompilerMenuClean");
 int idMenuBuildWorkspace                           = XRCID("idCompilerMenuBuildWorkspace");
 int idMenuRebuildWorkspace                         = XRCID("idCompilerMenuRebuildWorkspace");
 int idMenuCleanWorkspace                           = XRCID("idCompilerMenuCleanWorkspace");
+#endif // #if wxUSE_GUI
 int idMenuCleanTarget                              = wxNewId();
 int idMenuCleanFromProjectManager                  = wxNewId();
+#if wxUSE_GUI
 int idMenuCompileAndRun                            = XRCID("idCompilerMenuCompileAndRun");
 int idMenuRun                                      = XRCID("idCompilerMenuRun");
 int idMenuKillProcess                              = XRCID("idCompilerMenuKillProcess");
 int idMenuSelectTarget                             = XRCID("idCompilerMenuSelectTarget");
+#endif // #if wxUSE_GUI
 int idMenuSelectTargetOther[MAX_TARGETS]; // initialized in ctor
+#if wxUSE_GUI
 int idMenuNextError                                = XRCID("idCompilerMenuNextError");
 int idMenuPreviousError                            = XRCID("idCompilerMenuPreviousError");
 int idMenuClearErrors                              = XRCID("idCompilerMenuClearErrors");
 int idMenuSettings                                 = XRCID("idCompilerMenuSettings");
 
 int idToolTarget                                   = XRCID("idToolTarget");
+#endif // #if wxUSE_GUI
 
 int idGCCProcess1                                  = wxNewId();
 int idGCCProcess2                                  = wxNewId();
@@ -220,6 +257,7 @@
 int idGCCProcess16                                 = wxNewId();
 
 BEGIN_EVENT_TABLE(CompilerGCC, cbCompilerPlugin)
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     EVT_UPDATE_UI(idMenuCompile,                       CompilerGCC::OnUpdateUI)
     EVT_UPDATE_UI(idMenuCompileTarget,                 CompilerGCC::OnUpdateUI)
     EVT_UPDATE_UI(idMenuCompileFromProjectManager,     CompilerGCC::OnUpdateUI)
@@ -247,10 +285,14 @@
     EVT_UPDATE_UI(idMenuClearErrors,                   CompilerGCC::OnUpdateUI)
     EVT_UPDATE_UI(idMenuSettings,                      CompilerGCC::OnUpdateUI)
     EVT_UPDATE_UI(idToolTarget,                        CompilerGCC::OnUpdateUI)
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     EVT_IDLE(                                       CompilerGCC::OnIdle)
+#if wxUSE_GUI
     EVT_TIMER(idTimerPollCompiler,                  CompilerGCC::OnTimer)
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     EVT_MENU(idMenuRun,                             CompilerGCC::Dispatcher)
     EVT_MENU(idMenuCompileAndRun,                   CompilerGCC::Dispatcher)
     EVT_MENU(idMenuCompile,                         CompilerGCC::Dispatcher)
@@ -273,14 +315,21 @@
     EVT_MENU(idMenuPreviousError,                   CompilerGCC::Dispatcher)
     EVT_MENU(idMenuClearErrors,                     CompilerGCC::Dispatcher)
     EVT_MENU(idMenuSettings,                        CompilerGCC::Dispatcher)
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI
     EVT_TEXT_URL(idBuildLog,                        CompilerGCC::TextURL)
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
     EVT_CHOICE(idToolTarget,                        CompilerGCC::OnSelectTarget)
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
     EVT_PIPEDPROCESS_STDOUT_RANGE(idGCCProcess1,     idGCCProcess16, CompilerGCC::OnGCCOutput)
     EVT_PIPEDPROCESS_STDERR_RANGE(idGCCProcess1,     idGCCProcess16, CompilerGCC::OnGCCError)
     EVT_PIPEDPROCESS_TERMINATED_RANGE(idGCCProcess1, idGCCProcess16, CompilerGCC::OnGCCTerminated)
+#endif // #if wxUSE_GUI
 END_EVENT_TABLE()
 
 CompilerGCC::CompilerGCC() :
@@ -289,15 +338,23 @@
     m_RealTargetIndex(0),
     m_PageIndex(-1),
     m_ListPageIndex(-1),
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_Menu(0L),
     m_TargetMenu(0L),
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_TargetIndex(-1),
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pErrorsMenu(0L),
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pProject(0L),
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pTbar(0L),
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pLog(0L),
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pListLog(0L),
     m_pToolTarget(0L),
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_RunAfterCompile(false),
     m_LastExitCode(0),
     m_NotifiedMaxErrors(false),
@@ -315,8 +372,10 @@
     m_IsCompileFileRequest(false),
     m_LogBuildProgressPercentage(false)
 {
+#if wxUSE_GUI
     if (!Manager::LoadResource(_T("compiler.zip")))
         NotifyMissingFile(_T("compiler.zip"));
+#endif // #if wxUSE_GUI
 }
 
 CompilerGCC::~CompilerGCC()
@@ -330,15 +389,25 @@
     m_RealTargetIndex = 0;
     m_PageIndex = -1;
     m_ListPageIndex = -1;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_Menu = 0L;
     m_TargetMenu = 0L;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_TargetIndex = -1;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pErrorsMenu = 0L;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pProject = 0L;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pTbar = 0L;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pLog = 0L;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pListLog = 0L;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#if wxUSE_GUI
     m_pToolTarget = 0L;
+#endif // #if wxUSE_GUI
     m_RunAfterCompile = false;
     m_LastExitCode = 0;
     m_NotifiedMaxErrors = false;
@@ -355,7 +424,9 @@
     m_IsWorkspaceOperation = false;
     m_IsCompileFileRequest = false;
 
+#if wxUSE_GUI
     m_timerIdleWakeUp.SetOwner(this, idTimerPollCompiler);
+#endif // #if wxUSE_GUI
 
     for (int i = 0; i < MAX_TARGETS; ++i)
         idMenuSelectTargetOther[i] = wxNewId();
@@ -364,6 +435,7 @@
 
     AllocProcesses();
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     LogManager* msgMan = Manager::Get()->GetLogManager();
 
     // create compiler's log
@@ -406,6 +478,9 @@
     bool hasBuildProg = Manager::Get()->GetConfigManager(_T("compiler"))->ReadBool(_T("/build_progress/bar"), false);
     if (hasBuildProg)
         m_pLog->AddBuildProgressBar();
+#else
+    m_PageIndex = 0;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     // set default compiler for new projects
     CompilerFactory::SetDefaultCompiler(Manager::Get()->GetConfigManager(_T("compiler"))->Read(_T("/default_compiler"), _T("gcc")));
@@ -428,7 +503,9 @@
     Manager::Get()->RegisterEventSink(cbEVT_PROJECT_CLOSE,            new cbEventFunctor<CompilerGCC, CodeBlocksEvent>(this, &CompilerGCC::OnProjectUnloaded));
     Manager::Get()->RegisterEventSink(cbEVT_PROJECT_TARGETS_MODIFIED, new cbEventFunctor<CompilerGCC, CodeBlocksEvent>(this, &CompilerGCC::OnProjectActivated));
 
+#if wxUSE_GUI
     Manager::Get()->RegisterEventSink(cbEVT_COMPILE_FILE_REQUEST,     new cbEventFunctor<CompilerGCC, CodeBlocksEvent>(this, &CompilerGCC::OnCompileFileRequest));
+#endif // #if wxUSE_GUI
 }
 
 void CompilerGCC::OnRelease(bool appShutDown)
@@ -438,6 +515,7 @@
 
     SaveOptions();
     Manager::Get()->GetConfigManager(_T("compiler"))->Write(_T("/default_compiler"), CompilerFactory::GetDefaultCompilerID());
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (Manager::Get()->GetLogManager())
     {
         // for batch builds, the log is deleted by the manager
@@ -453,6 +531,7 @@
         Manager::Get()->ProcessEvent(evt);
         m_pListLog = 0;
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     // let wx handle this on shutdown ( if we return here Valgrind will be sad :'( )
     if (!appShutDown)
@@ -467,6 +546,7 @@
 
 int CompilerGCC::Configure(cbProject* project, ProjectBuildTarget* target)
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     cbConfigurationDialog dlg(Manager::Get()->GetAppWindow(), wxID_ANY, _("Project build options"));
     cbConfigurationPanel* panel = new CompilerOptionsDlg(&dlg, this, project, target);
     panel->SetParentDialog(&dlg);
@@ -484,9 +564,11 @@
             m_pLog->RemoveBuildProgressBar();
     }
 //    delete panel;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     return 0;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 cbConfigurationPanel* CompilerGCC::GetConfigurationPanel(wxWindow* parent)
 {
     CompilerOptionsDlg* dlg = new CompilerOptionsDlg(parent, this, 0, 0);
@@ -497,7 +579,9 @@
 {
     Configure(NULL);
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CompilerGCC::BuildMenu(wxMenuBar* menuBar)
 {
     if (!IsAttached())
@@ -543,7 +627,9 @@
         prj->InsertSeparator(propsPos);
     }
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CompilerGCC::BuildModuleMenu(const ModuleType type, wxMenu* menu, const FileTreeData* data)
 {
     if (!IsAttached())
@@ -609,7 +695,9 @@
         }
     }
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 bool CompilerGCC::BuildToolBar(wxToolBar* toolBar)
 {
     if (!IsAttached() || !toolBar)
@@ -624,7 +712,9 @@
     DoRecreateTargetMenu(); // make sure the tool target combo is up-to-date
     return true;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CompilerGCC::Dispatcher(wxCommandEvent& event)
 {
     int eventId = event.GetId();
@@ -680,14 +770,19 @@
     if ( (ed = Manager::Get()->GetEditorManager()->GetBuiltinActiveEditor()) )
         ed->GetControl()->SetFocus();
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI
 void CompilerGCC::TextURL(wxTextUrlEvent& event)
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (event.GetId() == idBuildLog && event.GetMouseEvent().ButtonDown(wxMOUSE_BTN_LEFT))
         m_pLog->OpenLink(event.GetURLStart(), event.GetURLEnd());
     else
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         event.Skip();
 }
+#endif // #if wxUSE_GUI
 
 void CompilerGCC::SetupEnvironment()
 {
@@ -813,6 +908,7 @@
 
 bool CompilerGCC::StopRunningDebugger()
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     cbDebuggerPlugin *dbg = Manager::Get()->GetDebuggerManager()->GetActiveDebugger();
     // is the debugger running?
     if (dbg && dbg->IsRunning())
@@ -837,6 +933,7 @@
         }
     }
 
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     return true;
 }
 
@@ -971,6 +1068,7 @@
     SetupEnvironment();
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CompilerGCC::PrepareCompileFilePM(wxFileName& file)
 {
     // we 're called from a menu in ProjectManager
@@ -1006,6 +1104,7 @@
         }
     }
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 bool CompilerGCC::CheckProject()
 {
@@ -1028,6 +1127,7 @@
                 : Manager::Get()->GetProjectManager()->GetActiveProject();
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CompilerGCC::StartCompileFile(wxFileName file)
 {
     if (m_pProject)
@@ -1042,6 +1142,7 @@
     if (!fname.IsEmpty())
         CompileFile( UnixFilename(fname) );
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 wxString CompilerGCC::ProjectMakefile()
 {
@@ -1061,13 +1162,16 @@
     if (IsProcessRunning())
         return;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     CodeBlocksLogEvent evtSwitch(cbEVT_SWITCH_TO_LOG_WINDOW, m_pLog);
     Manager::Get()->ProcessEvent(evtSwitch);
 
     if (m_pLog)
         m_pLog->Clear();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 FileTreeData* CompilerGCC::DoSwitchProjectTemporarily()
 {
     ProjectManager* manager = Manager::Get()->GetProjectManager();
@@ -1082,6 +1186,7 @@
 
     return ftd;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void CompilerGCC::AddToCommandQueue(const wxArrayString& commands)
 {
@@ -1133,11 +1238,13 @@
         }
     }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (m_pLog->progress)
     {
         m_pLog->progress->SetRange(m_MaxProgress);
         m_pLog->progress->SetValue(m_CurrentProgress);
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 void CompilerGCC::AllocProcesses()
@@ -1301,8 +1408,13 @@
     wxString oldLibPath; // keep old PATH/LD_LIBRARY_PATH contents
     wxGetEnv(CB_LIBRARY_ENVVAR, &oldLibPath);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     bool pipe = true;
     int flags = wxEXEC_ASYNC;
+#else
+    bool pipe = true;
+    int flags = wxEXEC_SYNC;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (cmd->isRun)
     {
         pipe = false; // no need to pipe output channels...
@@ -1350,11 +1462,15 @@
                 LogMessage(msg, cltError, ltAll, true);
                 LogWarningOrError(cltNormal, 0, wxEmptyString, wxEmptyString,
                                   wxString::Format(_("=== Build failed: %s ==="), msg.wx_str()));
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                 m_pListLog->AutoFitColumns();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                 SaveBuildLog();
             }
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             if (!Manager::IsBatchBuild() && m_pLog->progress)
                 m_pLog->progress->SetValue(0);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         }
         Delete(m_CompilerProcessList.at(procIndex).pProcess);
         m_CommandQueue.Clear();
@@ -1367,11 +1483,17 @@
     wxSetEnv(CB_LIBRARY_ENVVAR, oldLibPath);
 
     delete cmd;
+#if !(wxUSE_GUI) || defined(CB_FOR_CONSOLE)
+    // if nothing more to do, leave or we always get a "Nothing to be done" at the end
+    if(m_BuildState == bsNone && m_NextBuildState == bsNone)
+        return 0;
+#endif // #if !(wxUSE_GUI) || defined(CB_FOR_CONSOLE)
     return DoRunQueue();
 }
 
 void CompilerGCC::DoClearTargetMenu()
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (m_TargetMenu)
     {
         wxMenuItemList& items = m_TargetMenu->GetMenuItems();
@@ -1387,6 +1509,7 @@
 //        items.Clear();
 //        items.DeleteContents(olddelete);
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 bool CompilerGCC::IsValidTarget(const wxString &target) const
@@ -1406,18 +1529,22 @@
     if (!IsAttached())
         return;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (m_pToolTarget)
         m_pToolTarget->Freeze();
     wxMenuBar* mbar = Manager::Get()->GetAppFrame()->GetMenuBar();
     if (mbar)
         mbar->Freeze();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     do
     {
         // clear menu and combo
         DoClearTargetMenu();
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         if (m_pToolTarget)
             m_pToolTarget->Clear();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         // if no project, leave
         if (!CheckProject())
@@ -1442,6 +1569,7 @@
               wsp->SetPreferredTarget(tgtStr);
         }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         // fill the menu and combo
         for (size_t x = 0; x < m_Targets.GetCount(); ++x)
         {
@@ -1460,6 +1588,7 @@
                 wxEVT_COMMAND_MENU_SELECTED,
                 (wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction)
                 &CompilerGCC::OnSelectTarget );
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         // housekeeping
         m_TargetIndex = m_Targets.Index(tgtStr);
@@ -1469,23 +1598,28 @@
 
         DoUpdateTargetMenu(m_TargetIndex);
 
+#if wxUSE_GUI
         // update combo
         if (m_pToolTarget)
             m_pToolTarget->SetSelection(m_TargetIndex);
+#endif // #if wxUSE_GUI
 
         // finally, make sure we 're using the correct compiler for the project
         SwitchCompiler(m_pProject->GetCompilerID());
     }
     while (false);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (mbar)
         mbar->Thaw();
     if (m_pToolTarget)
         m_pToolTarget->Thaw();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 void CompilerGCC::DoUpdateTargetMenu(int targetIndex)
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     // update indices
     m_TargetIndex = targetIndex;
     m_RealTargetIndex = m_TargetIndex - m_RealTargetsStartIndex;
@@ -1514,6 +1648,7 @@
     // can't set it here, because this function is called by the
     // tool combo's event handler
 //    DBGLOG(_T("m_TargetIndex=%d, m_pToolTarget->GetCurrentSelection()=%d, m_RealTargetsStartIndex=%d"), m_TargetIndex, m_pToolTarget->GetCurrentSelection(), m_RealTargetsStartIndex);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 void CompilerGCC::UpdateProjectTargets(cbProject* project)
@@ -1642,6 +1777,7 @@
     return compiler && compiler->IsValid();
 }
 
+#if wxUSE_GUI
 void CompilerGCC::PrintBanner(BuildAction action, cbProject* prj, ProjectBuildTarget* target)
 {
     if (!CompilerValid(target))
@@ -1684,9 +1820,13 @@
                   Action.wx_str(), targetName.wx_str(), projectName.wx_str(), compilerName.wx_str());
     LogWarningOrError(cltNormal, 0, wxEmptyString, wxEmptyString, wxT("=== ") + banner + wxT(" ==="));
     LogMessage(wxT("-------------- ") + banner + wxT("---------------"), cltNormal, ltAll, false, true);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pListLog->AutoFitColumns();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CompilerGCC::DoGotoNextError()
 {
     m_Errors.Next();
@@ -1698,14 +1838,18 @@
     m_Errors.Previous();
     m_pListLog->FocusError(m_Errors.GetFocusedError());
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void CompilerGCC::DoClearErrors()
 {
     m_Errors.Clear();
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pListLog->Clear();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_NotifiedMaxErrors = false;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 int CompilerGCC::RunSingleFile(const wxString& filename)
 {
     wxFileName fname(filename);
@@ -1764,6 +1908,7 @@
     m_CommandQueue.Add(new CompilerCommand(cmd, wxEmptyString, 0, 0, true));
     return 0;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 int CompilerGCC::Run(const wxString& target)
 {
@@ -1774,6 +1919,7 @@
 
 int CompilerGCC::Run(ProjectBuildTarget* target)
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     bool commandIsQuoted = false; // remember if we quoted the command, avoid unneeded quotes, because they break execution with "konsole" under KDE
     if (!CheckProject())
     {
@@ -1987,6 +2133,7 @@
     m_pProject->SetCurrentlyCompilingTarget(0);
 
     Manager::Get()->GetProjectManager()->SetIsRunning(this);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     return 0;
 }
 
@@ -2057,9 +2204,11 @@
 
 int CompilerGCC::DistClean(ProjectBuildTarget* target)
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     // make sure all project files are saved
     if (m_pProject && !m_pProject->SaveAllFiles())
         Manager::Get()->GetLogManager()->Log(_("Could not save all files..."));
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     if (!m_IsWorkspaceOperation)
         DoPrepareQueue(true);
@@ -2263,7 +2412,12 @@
 
     if (m_pBuildingProject != m_pLastBuildingProject || bt != m_pLastBuildingTarget)
     {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         Manager::Get()->GetMacrosManager()->RecalcVars(m_pBuildingProject, Manager::Get()->GetEditorManager()->GetActiveEditor(), bt);
+#else
+        Manager::Get()->GetMacrosManager()->RecalcVars(m_pBuildingProject, 0l, bt);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+
         if (bt)
             SwitchCompiler(bt->GetCompilerID());
 
@@ -2302,7 +2456,9 @@
 
         case bsTargetClean:
         {
+#if wxUSE_GUI
             PrintBanner(baClean, m_pBuildingProject, bt);
+#endif // #if wxUSE_GUI
 
             if ( UseMake(m_pBuildingProject) )
             {
@@ -2354,7 +2510,9 @@
 
         case bsTargetBuild:
         {
+#if wxUSE_GUI
             PrintBanner(baBuild, m_pBuildingProject, bt);
+#endif // #if wxUSE_GUI
 
             // run target build
             if ( UseMake(m_pBuildingProject) )
@@ -2578,6 +2736,7 @@
     if (!bj.project)
         return -2;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     // make sure all project files are saved
     if (    bj.project
         && (bj.project != m_pBuildingProject)
@@ -2585,6 +2744,7 @@
     {
         Manager::Get()->GetLogManager()->Log(_("Could not save all files..."));
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     m_pBuildingProject = bj.project;
     m_BuildingTargetName = bj.targetName;
@@ -2670,9 +2830,11 @@
 
     if (!CheckProject())
     {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         // no active project
         if (Manager::Get()->GetEditorManager()->GetActiveEditor())
             return CompileFile(Manager::Get()->GetEditorManager()->GetActiveEditor()->GetFilename());
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         return -1;
     }
 
@@ -2750,9 +2912,11 @@
     {
         for (size_t i = 0; i < arr->GetCount(); ++i)
         {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             cbProject* prj = arr->Item(i);
             if (prj && !prj->SaveAllFiles())
                 Manager::Get()->GetLogManager()->Log(F(_("Could not save all files of %s..."), prj->GetTitle().wx_str()), m_PageIndex);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         }
     }
 
@@ -2889,7 +3053,9 @@
     ProjectFile* pf = m_pProject ? m_pProject->GetFileByFilename(file, true, false) : 0;
     ProjectBuildTarget* bt = GetBuildTargetForFile(pf);
 
+#if wxUSE_GUI
     PrintBanner(baBuildFile, m_pProject, bt);
+#endif // #if wxUSE_GUI
 
     if ( !CompilerValid(bt) )
         return -1;
@@ -2909,8 +3075,10 @@
 
 int CompilerGCC::CompileFileWithoutProject(const wxString& file)
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     // compile single file not belonging to a project
     Manager::Get()->GetEditorManager()->Save(file);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     // switch to the default compiler
     SwitchCompiler(CompilerFactory::GetDefaultCompilerID());
@@ -2986,17 +3154,20 @@
 void CompilerGCC::OnCompile(wxCommandEvent& event)
 {
     int bak = m_RealTargetIndex;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (event.GetId() == idMenuCompileFromProjectManager)
     {
         // we 're called from a menu in ProjectManager
         // let's check the selected project...
         DoSwitchProjectTemporarily();
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     ProjectBuildTarget* target = 0;
     Build(target);
     m_RealTargetIndex = bak;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CompilerGCC::OnCompileFile(wxCommandEvent& event)
 {
     // TODO (Rick#1#): Clean the file so it will always recompile
@@ -3048,7 +3219,9 @@
             Manager::Get()->GetLogManager()->DebugLog(F(_T("File to remove does not exist: %s"), obj_file.wx_str()));
     }
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI
 void CompilerGCC::OnRebuild(wxCommandEvent& event)
 {
     CheckProject();
@@ -3068,18 +3241,24 @@
     {
         // we 're called from a menu in ProjectManager
         // let's check the selected project...
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         DoSwitchProjectTemporarily();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     }
     ProjectBuildTarget* target = 0;
     Rebuild(target);
     m_RealTargetIndex = bak;
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 void CompilerGCC::OnCompileAll(cb_unused wxCommandEvent& event)
 {
     BuildWorkspace();
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 void CompilerGCC::OnRebuildAll(cb_unused wxCommandEvent& event)
 {
     AnnoyingDialog dlg(_("Rebuild workspace"),
@@ -3095,7 +3274,9 @@
 
     RebuildWorkspace();
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 void CompilerGCC::OnCleanAll(cb_unused wxCommandEvent& event)
 {
     AnnoyingDialog dlg(_("Clean project"),
@@ -3113,7 +3294,9 @@
 
     CleanWorkspace();
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 void CompilerGCC::OnClean(wxCommandEvent& event)
 {
     CheckProject();
@@ -3135,13 +3318,17 @@
     {
         // we 're called from a menu in ProjectManager
         // let's check the selected project...
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         DoSwitchProjectTemporarily();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     }
     ProjectBuildTarget* target = 0;
     Clean(target);
     m_RealTargetIndex = bak;
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 void CompilerGCC::OnProjectCompilerOptions(cb_unused wxCommandEvent& event)
 {
     ProjectManager* manager = Manager::Get()->GetProjectManager();
@@ -3175,7 +3362,9 @@
             Configure(prj);
     }
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 void CompilerGCC::OnTargetCompilerOptions(cb_unused wxCommandEvent& event)
 {
     int bak = m_RealTargetIndex;
@@ -3187,13 +3376,17 @@
         m_RealTargetIndex = idx; // TODO: check
 
     // let's check the selected project...
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     DoSwitchProjectTemporarily();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     ProjectBuildTarget* target = 0;
     m_RealTargetIndex = bak;
     Configure(m_pProject, target);
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 void CompilerGCC::OnKillProcess(cb_unused wxCommandEvent& event)
 {
     KillProcess();
@@ -3215,7 +3408,9 @@
         m_pToolTarget->SetSelection(i);
     }
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CompilerGCC::OnNextError(cb_unused wxCommandEvent& event)
 {
     DoGotoNextError();
@@ -3225,12 +3420,14 @@
 {
     DoGotoPreviousError();
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void CompilerGCC::OnClearErrors(cb_unused wxCommandEvent& event)
 {
     DoClearErrors();
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CompilerGCC::OnUpdateUI(wxUpdateUIEvent& event)
 {
     cbProject* prj = Manager::Get()->GetProjectManager()->GetActiveProject();
@@ -3287,6 +3484,7 @@
     // *very* important! don't forget it...
     event.Skip();
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void CompilerGCC::OnProjectActivated(CodeBlocksEvent& event)
 {
@@ -3312,6 +3510,7 @@
         m_pProject = 0;
 }
 
+#if wxUSE_GUI
 void CompilerGCC::OnCompileFileRequest(CodeBlocksEvent& event)
 {
     cbProject*  prj = event.GetProject();
@@ -3359,7 +3558,9 @@
 
     m_IsCompileFileRequest = false;
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 void CompilerGCC::OnGCCOutput(CodeBlocksEvent& event)
 {
     wxString msg = event.GetString();
@@ -3373,18 +3574,23 @@
         AddOutputLine(msg);
     }
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 void CompilerGCC::OnGCCError(CodeBlocksEvent& event)
 {
     wxString msg = event.GetString();
     if (!msg.IsEmpty())
         AddOutputLine(msg);
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 void CompilerGCC::OnGCCTerminated(CodeBlocksEvent& event)
 {
     OnJobEnd(event.GetId() - idGCCProcess1, event.GetInt());
 }
+#endif // #if wxUSE_GUI
 
 void CompilerGCC::AddOutputLine(const wxString& output, bool forceErrorColour)
 {
@@ -3554,11 +3753,13 @@
                 float p = (float)(m_CurrentProgress * 100.0f) / (float)m_MaxProgress;
                 progressMsg.Printf(_T("[%5.1f%%] "), p);
             }
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             if (m_pLog->progress)
             {
                 m_pLog->progress->SetRange(m_MaxProgress);
                 m_pLog->progress->SetValue(m_CurrentProgress);
             }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         }
 
         Manager::Get()->GetLogManager()->Log(progressMsg + msg, m_PageIndex, lv);
@@ -3746,11 +3947,15 @@
                 LogWarningOrError(cltNormal, 0, wxEmptyString, wxEmptyString,
                                   wxString::Format(_("=== Build %s: %s ==="),
                                                    wxString(m_LastExitCode == 0 ? _("finished") : _("failed")).wx_str(), msg.wx_str()));
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                 m_pListLog->AutoFitColumns();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                 SaveBuildLog();
             }
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             if (!Manager::IsBatchBuild() && m_pLog->progress)
                 m_pLog->progress->SetValue(0);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         }
         else
         {
@@ -3765,6 +3970,7 @@
 
         if (!Manager::IsBatchBuild() && m_Errors.GetCount(cltError))
         {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             if (Manager::Get()->GetConfigManager(_T("message_manager"))->ReadBool(_T("/auto_show_build_errors"), true))
             {
                 CodeBlocksLogEvent evtShow(cbEVT_SHOW_LOG_MANAGER);
@@ -3774,6 +3980,7 @@
             Manager::Get()->ProcessEvent(evtSwitch);
 
             m_pListLog->FocusError(m_Errors.GetFirstError());
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         }
         else
         {
@@ -3786,8 +3993,11 @@
             else if (!Manager::IsBatchBuild())
             {
                 // switch to the "Build messages" window only if the active log window is "Build log"
+#if wxUSE_GUI
                 CodeBlocksLogEvent evtGetActive(cbEVT_GET_ACTIVE_LOG_WINDOW);
                 Manager::Get()->ProcessEvent(evtGetActive);
+#endif // #if wxUSE_GUI
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                 if (evtGetActive.logger == m_pLog)
                 {
                     // don't close the message manager (if auto-hiding), if warnings are required to keep it open
@@ -3806,15 +4016,18 @@
                         Manager::Get()->ProcessEvent(evtShow);
                     }
                 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             }
         }
 
         m_RunAfterCompile = false;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         // no matter what happened with the build, return the focus to the active editor
         cbEditor* ed = Manager::Get()->GetEditorManager()->GetBuiltinEditor(Manager::Get()->GetEditorManager()->GetActiveEditor());
         if (ed)
             ed->GetControl()->SetFocus();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     }
 }
 
@@ -3828,8 +4041,10 @@
     {
         LogMessage(m_Clean ? _("Done.\n") : _("Nothing to be done (all items are up-to-date).\n"));
         // if message manager is auto-hiding, unlock it (i.e. close it)
+#if wxUSE_GUI
         CodeBlocksLogEvent evtShow(cbEVT_HIDE_LOG_MANAGER);
         Manager::Get()->ProcessEvent(evtShow);
+#endif // #if wxUSE_GUI
     }
 
     if (!IsProcessRunning())
@@ -3839,7 +4054,9 @@
             manager->SetIsRunning(NULL);
 
         CodeBlocksEvent evt(cbEVT_COMPILER_FINISHED, 0, m_pProject, 0, this);
+#if wxUSE_GUI
         evt.SetInt(m_LastExitCode);
+#endif // #if wxUSE_GUI
         Manager::Get()->ProcessEvent(evt);
         m_LastExitCode = 0;
     }
Index: src/plugins/compilergcc/compilergcc.h
===================================================================
--- src/plugins/compilergcc/compilergcc.h	(revision 9855)
+++ src/plugins/compilergcc/compilergcc.h	(working copy)
@@ -6,7 +6,9 @@
 #ifndef COMPILERGCC_H
 #define COMPILERGCC_H
 
+#if wxUSE_GUI
 #include <wx/choice.h>
+#endif // #if wxUSE_GUI
 #include <wx/dynarray.h>
 #include <wx/process.h>
 #include <wx/timer.h>
@@ -21,7 +23,9 @@
 #include <sdk_events.h>
 #include <settings.h> // SDK
 
+#if wxUSE_GUI
 #include "compilermessages.h"
+#endif // #if wxUSE_GUI
 #include "compilererrors.h"
 #include "compiler_defs.h"
 
@@ -94,14 +98,18 @@
 
         virtual void OnAttach();
         virtual void OnRelease(bool appShutDown);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         virtual void BuildMenu(wxMenuBar* menuBar); // offer for menu space by host
         virtual void BuildModuleMenu(const ModuleType type, wxMenu* menu, const FileTreeData* data = 0); // offer for menu space by a module
         virtual bool BuildToolBar(wxToolBar* toolBar);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         virtual int GetToolBarPriority() { return 1; }
 
         virtual int Run(ProjectBuildTarget* target = 0L);
         virtual int Run(const wxString& target);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         virtual int RunSingleFile(const wxString& filename);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         virtual int Clean(const wxString& target);
         virtual int Clean(ProjectBuildTarget* target = 0L);
         virtual int DistClean(ProjectBuildTarget* target = 0L);
@@ -123,7 +131,9 @@
 
         int GetConfigurationPriority() const { return 0; }
         int GetConfigurationGroup() const { return cgCompiler; }
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         cbConfigurationPanel* GetConfigurationPanel(wxWindow* parent);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         bool IsValidTarget(const wxString& target) const;
 
@@ -135,7 +145,9 @@
         void OnTimer(wxTimerEvent& event);
 
         void OnCompile(wxCommandEvent& event);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void OnCompileFile(wxCommandEvent& event);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void OnCleanFile(wxCommandEvent& event);
         void OnRebuild(wxCommandEvent& event);
         void OnCompileAll(wxCommandEvent& event);
@@ -148,16 +160,24 @@
         void OnCompileAndRun(wxCommandEvent& event);
         void OnKillProcess(wxCommandEvent& event);
         void OnSelectTarget(wxCommandEvent& event);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void OnNextError(wxCommandEvent& event);
         void OnPreviousError(wxCommandEvent& event);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void OnClearErrors(wxCommandEvent& event);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void OnUpdateUI(wxUpdateUIEvent& event);
         void OnConfig(wxCommandEvent& event);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     private:
         friend class CompilerOptionsDlg;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void Dispatcher(wxCommandEvent& event);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#if wxUSE_GUI
         void TextURL(wxTextUrlEvent& event);
+#endif // #if wxUSE_GUI
 
         bool StopRunningDebugger();
 
@@ -188,17 +208,23 @@
         void DoClearTargetMenu();
         void DoRecreateTargetMenu();
         void DoUpdateTargetMenu(int targetIndex);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         FileTreeData* DoSwitchProjectTemporarily();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         ProjectBuildTarget* DoAskForTarget();
         int DoGUIAskForTarget();
         void ClearLog();
         void PrepareCompileFile(wxFileName& file);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void PrepareCompileFilePM(wxFileName& file);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         bool CheckProject();
         void AskForActiveProject();
         void StartCompileFile(wxFileName file);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void DoGotoNextError();
         void DoGotoPreviousError();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void DoClearErrors();
         wxString ProjectMakefile();
         void AddOutputLine(const wxString& output, bool forceErrorColour = false);
@@ -272,16 +298,26 @@
         wxString            m_CompilerId;
         int                 m_PageIndex;
         int                 m_ListPageIndex;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         wxMenu*             m_Menu;
         wxMenu*             m_TargetMenu;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         int                 m_TargetIndex;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         wxMenu*             m_pErrorsMenu;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         cbProject*          m_pProject;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         wxToolBar*          m_pTbar;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         wxTimer             m_timerIdleWakeUp;
         BuildLogger*        m_pLog;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         CompilerMessages*   m_pListLog;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#if wxUSE_GUI
         wxChoice*           m_pToolTarget;
+#endif // #if wxUSE_GUI
         bool                m_RunAfterCompile;
         wxString            m_CdRun;
         wxString            m_RunCmd;
Index: src/plugins/compilergcc/directcommands.cpp
===================================================================
--- src/plugins/compilergcc/directcommands.cpp	(revision 9855)
+++ src/plugins/compilergcc/directcommands.cpp	(working copy)
@@ -10,7 +10,9 @@
 #include <sdk.h>
 #include <wx/intl.h>
 #include <wx/filename.h>
+#if wxUSE_GUI
 #include <wx/msgdlg.h>
+#endif // #if wxUSE_GUI
 #include <wx/stream.h>
 #include <wx/wfstream.h>
 #include <wx/txtstrm.h>
Index: src/plugins/xpmanifest/windowsxplooknfeel.cpp
===================================================================
--- src/plugins/xpmanifest/windowsxplooknfeel.cpp	(revision 9855)
+++ src/plugins/xpmanifest/windowsxplooknfeel.cpp	(working copy)
@@ -13,7 +13,9 @@
 #include <wx/file.h>
 #include <wx/filename.h>
 #include <wx/intl.h>
+#if wxUSE_GUI
 #include <wx/msgdlg.h>
+#endif // #if wxUSE_GUI
 #include <wx/string.h>
 #include "cbproject.h"
 #include "globals.h"
Index: src/sdk/cbplugin.cpp
===================================================================
--- src/sdk/cbplugin.cpp	(revision 9855)
+++ src/sdk/cbplugin.cpp	(working copy)
@@ -10,18 +10,24 @@
 #include "sdk_precomp.h"
 
 #ifndef CB_PRECOMP
+#if wxUSE_GUI
     #include <wx/frame.h> // wxFrame
     #include <wx/menu.h>
+#endif // #if wxUSE_GUI
     #include <wx/process.h>
 
+#if wxUSE_GUI
     #include "cbeditor.h"
+#endif // #if wxUSE_GUI
     #include "cbplugin.h"
     #include "cbproject.h"
     #include "compiler.h" // GetSwitches
     #include "configmanager.h"
+#if wxUSE_GUI
     #include "debuggermanager.h"
     #include "editorcolourset.h"
     #include "editormanager.h"
+#endif // #if wxUSE_GUI
     #include "infowindow.h"
     #include "logmanager.h"
     #include "macrosmanager.h"
@@ -31,6 +37,7 @@
     #include "sdk_events.h"
 #endif
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/toolbar.h>
 
 #include "annoyingdialog.h"
@@ -39,6 +46,7 @@
 #include "ccmanager.h"
 #include "debuggermanager.h"
 #include "editor_hooks.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "loggers.h"
 
 #ifndef __WXMSW__
@@ -63,12 +71,14 @@
 {
     if (m_IsAttached)
         return;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     wxWindow* window = Manager::Get()->GetAppWindow();
     if (window)
     {
         // push ourself in the application's event handling chain...
         window->PushEventHandler(this);
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_IsAttached = true;
     OnAttach();
     SetEvtHandlerEnabled(true);
@@ -98,12 +108,14 @@
     if (appShutDown)
         return; // nothing more to do, if the app is shutting down
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     wxWindow* window = Manager::Get()->GetAppWindow();
     if (window)
     {
         // remove ourself from the application's event handling chain...
         window->RemoveEventHandler(this);
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 void cbPlugin::NotImplemented(const wxString& log) const
@@ -120,6 +132,7 @@
     m_Type = ptCompiler;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 /////
 ///// cbDebuggerPlugin
 /////
@@ -996,6 +1009,9 @@
 {
     Manager::Get()->GetDebuggerManager()->GetInterfaceFactory()->HideValueTooltip();
 }
+
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+
 /////
 ///// cbToolPlugin
 /////
@@ -1018,6 +1034,7 @@
 ///// cbCodeCompletionPlugin
 /////
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 cbCodeCompletionPlugin::cbCodeCompletionPlugin()
 {
     m_Type = ptCodeCompletion;
@@ -1037,6 +1054,7 @@
 {
     return (Manager::Get()->GetCCManager()->GetProviderFor(ed) == this);
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 /////
 ///// cbWizardPlugin
@@ -1357,3 +1376,5 @@
 
     return 0;
 }
+
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
Index: src/sdk/cbproject.cpp
===================================================================
--- src/sdk/cbproject.cpp	(revision 9855)
+++ src/sdk/cbproject.cpp	(working copy)
@@ -9,28 +9,44 @@
 
 #include "sdk_precomp.h"
 
+#if wxUSE_GUI
 #ifndef wxUSE_CHOICEDLG
     #define wxUSE_CHOICEDLG 1
 #endif
 
 #include <wx/choicdlg.h>
 #include <wx/filedlg.h>
+#endif // #if wxUSE_GUI
+
 #include <wx/filename.h>
+
+#if wxUSE_GUI
 #include <wx/textdlg.h>
+#endif // #if wxUSE_GUI
 
 #ifndef CB_PRECOMP
     #include <wx/dir.h>
 
     #include "cbproject.h" // class's header file
+#if wxUSE_GUI
     #include "cbeditor.h"
+#endif // #if wxUSE_GUI
+    #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "cbtreectrl.h"
+    #endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "compiler.h" // GetSwitches
     #include "compilerfactory.h"
     #include "configmanager.h"
+    #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "editormanager.h"
+    #endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "filemanager.h"
     #include "globals.h"
+    #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "infowindow.h"
+    #else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+    #include "infowindow_base.h"
+    #endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "logmanager.h"
     #include "macrosmanager.h"
     #include "manager.h"
@@ -42,15 +58,26 @@
 #endif
 
 #include <map>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#include "projectoptionsdlg.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "projectloader.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "projectlayoutloader.h"
 #include "selecttargetdlg.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "filegroupsandmasks.h"
 #include "filefilters.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "annoyingdialog.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "genericmultilinenotesdlg.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "compilercommandgenerator.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "cbcolourmanager.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 // class constructor
 cbProject::cbProject(const wxString& filename) :
@@ -79,6 +106,7 @@
         m_BasePath = GetBasePath();
         Open();
     }
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     else
     {
         // new project
@@ -105,6 +133,7 @@
 //            NotifyPlugins(cbEVT_PROJECT_OPEN);
         }
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 // class destructor
@@ -200,6 +229,7 @@
     }
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 wxString cbProject::CreateUniqueFilename()
 {
     const wxString prefix = _("Untitled");
@@ -232,6 +262,7 @@
     }
     return tmp << _T(".") << FileFilters::CODEBLOCKS_EXT;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void cbProject::ClearAllProperties()
 {
@@ -425,6 +456,7 @@
     m_LastModified = wxDateTime::Now();
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 bool cbProject::SaveAs()
 {
     wxFileName fname;
@@ -474,6 +506,7 @@
     return false;
 }
 
+
 bool cbProject::Save()
 {
     if (m_Filename.IsEmpty())
@@ -575,6 +608,7 @@
     }
     return result;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void cbProject::BeginAddFiles()
 {
@@ -804,10 +838,12 @@
     SetModified(true);
     m_ProjectFilesMap[UnixFilename(pf->relativeFilename)] = pf; // add to hashmap
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (!wxFileExists(fullFilename))
         pf->SetFileState(fvsMissing);
     else if (!wxFile::Access(fullFilename.c_str(), wxFile::write)) // readonly
         pf->SetFileState(fvsReadOnly);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     if ( !GenFilesHackMap.empty() )
     {
@@ -849,8 +885,9 @@
     if (!pf)
         return false;
     m_ProjectFilesMap.erase(UnixFilename(pf->relativeFilename)); // remove from hashmap
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     Manager::Get()->GetEditorManager()->Close(pf->file.GetFullPath());
-
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 	{
 		FilesList::iterator it = m_Files.find(pf);
 
@@ -958,6 +995,7 @@
     }
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void cbProject::SaveTreeState(wxTreeCtrl* tree)
 {
     ::SaveTreeState(tree, m_ProjectNode, m_ExpandedNodes, m_SelectedNodes);
@@ -967,6 +1005,7 @@
 {
     ::RestoreTreeState(tree, m_ProjectNode, m_ExpandedNodes, m_SelectedNodes);
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 const wxString& cbProject::GetMakefile()
 {
@@ -1058,6 +1097,7 @@
     return m_ProjectFilesMap[UnixFilename(tmp)];
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 bool cbProject::QueryCloseAllFiles()
 {
     FilesList::iterator it = m_Files.begin();
@@ -1109,17 +1149,20 @@
     }
     return count == 0;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 int cbProject::SelectTarget(int initial, bool evenIfOne)
 {
     if (!evenIfOne && GetBuildTargetsCount() == 1)
         return 0;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     SelectTargetDlg dlg(nullptr, this, initial);
     PlaceWindow(&dlg);
     if (dlg.ShowModal() == wxID_OK)
         return dlg.GetSelection();
 
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     return -1;
 }
 
@@ -1158,6 +1201,7 @@
     return target;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 bool cbProject::RenameBuildTarget(int index, const wxString& targetName)
 {
     ProjectBuildTarget* target = GetBuildTarget(index);
@@ -1303,6 +1347,7 @@
 {
     return RemoveBuildTarget(IndexOfBuildTargetName(targetName));
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 int cbProject::IndexOfBuildTargetName(const wxString& targetName) const
 {
@@ -1385,6 +1430,7 @@
     return GetBuildTarget(idx);
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void cbProject::ReOrderTargets(const wxArrayString& nameOrder)
 {
     LogManager* msgMan = Manager::Get()->GetLogManager();
@@ -1423,6 +1469,7 @@
     }
     SetModified(true);
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void cbProject::SetCurrentlyCompilingTarget(ProjectBuildTarget* bt)
 {
@@ -1571,6 +1618,7 @@
     return m_ExtendedObjectNamesGeneration;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void cbProject::SetNotes(const wxString& notes)
 {
     if (m_Notes != notes)
@@ -1615,6 +1663,7 @@
             SetNotes(dlg.GetNotes());
     }
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void cbProject::SetTitle(const wxString& title)
 {
Index: src/sdk/cbworkspace.cpp
===================================================================
--- src/sdk/cbworkspace.cpp	(revision 9855)
+++ src/sdk/cbworkspace.cpp	(working copy)
@@ -20,7 +20,10 @@
     #include <wx/intl.h>
 #endif
 
+#if wxUSE_GUI
 #include <wx/filedlg.h>
+#endif // #if wxUSE_GUI
+
 #include "filefilters.h"
 
 cbWorkspace::cbWorkspace(const wxString& filename) :
@@ -96,9 +99,12 @@
     LoadLayout();
 
     m_Filename.SetExt(FileFilters::WORKSPACE_EXT);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     SetModified(false);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 bool cbWorkspace::Save(bool force)
 {
     if (m_Filename.GetFullPath().IsEmpty())
@@ -143,18 +149,23 @@
 
     return Save(true);
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void cbWorkspace::SetTitle(const wxString& title)
 {
     m_Title = title;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     SetModified(true);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void cbWorkspace::SetModified(bool modified)
 {
     m_Modified = modified;
     // Manager::Get()->GetLogManager()->DebugLog(F(_T("Setting workspace to modified = \"%s\""), modified ? _T("true") : _T("false")));
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void cbWorkspace::SetPreferredTarget(const wxString &target)
 {
Index: src/sdk/compiler.cpp
===================================================================
--- src/sdk/compiler.cpp	(revision 9855)
+++ src/sdk/compiler.cpp	(working copy)
@@ -21,6 +21,7 @@
 
     #include <wx/intl.h>
     #include <wx/regex.h>
+    #include <wx/utils.h>
 #endif
 
 #include "compilercommandgenerator.h"
@@ -729,6 +730,7 @@
                  "Note that the only settings that are affected are those found in \"Advanced compiler options\"...\n\n"
                  "Do you want to update your current settings to the new defaults?");
         // don't ask if the compiler is not valid (i.e. not installed), just update
+#if wxUSE_GUI
         if (!IsValid() || cbMessageBox(msg, m_Name, wxICON_QUESTION | wxYES_NO) == wxID_YES)
         {
             for (int i = 0; i < ctCount; ++i)
@@ -737,6 +739,9 @@
             m_Options  = m_Mirror.Options;
             m_RegExes  = m_Mirror.RegExes;
         }
+#else  // #if wxUSE_GUI
+    #pragma message "Needs code added"
+#endif // #if wxUSE_GUI
     }
 }
 
@@ -1022,15 +1033,19 @@
             {
                 flags.Replace(wxT("\n"), wxT(" "));
                 flags.Replace(wxT("\r"), wxT(" "));
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                 SetCOnlyFlags( MakeUniqueString(GetCOnlyFlags() + wxT(" ") + flags,
                                                 wxT(" ")) );
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             }
             else if (node->GetAttribute(wxT("CPPFlags"), &flags))
             {
                 flags.Replace(wxT("\n"), wxT(" "));
                 flags.Replace(wxT("\r"), wxT(" "));
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                 SetCPPOnlyFlags( MakeUniqueString(GetCPPOnlyFlags() + wxT(" ") + flags,
                                                   wxT(" ")) );
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             }
         }
         else if (node->GetName() == wxT("Common"))
Index: src/sdk/compilercommandgenerator.cpp
===================================================================
--- src/sdk/compilercommandgenerator.cpp	(revision 9855)
+++ src/sdk/compilercommandgenerator.cpp	(working copy)
@@ -8,6 +8,11 @@
  */
 
 #include "sdk_precomp.h"
+
+#if !(wxUSE_GUI) || defined(CB_FOR_CONSOLE)
+#include "pluginmanager_base.h"
+#endif // #if !(wxUSE_GUI) || defined(CB_FOR_CONSOLE)
+
 #include "compilercommandgenerator.h"
 
 #include <wx/intl.h>
Index: src/sdk/compilerfactory.cpp
===================================================================
--- src/sdk/compilerfactory.cpp	(revision 9855)
+++ src/sdk/compilerfactory.cpp	(working copy)
@@ -10,7 +10,9 @@
 #include "sdk_precomp.h"
 
 #ifndef CB_PRECOMP
+    #if wxUSE_GUI
     #include <wx/choicdlg.h> // wxSingleChoiceDialog
+    #endif // #if wxUSE_GUI
     #include "compilerfactory.h"
     #include "manager.h"
     #include "logmanager.h"
@@ -18,7 +20,9 @@
     #include "compiler.h"
 #endif
 
+#if wxUSE_GUI
 #include "autodetectcompilers.h"
+#endif // #if wxUSE_GUI
 
 // statics
 CompilersArray CompilerFactory::Compilers;
@@ -256,35 +260,44 @@
         wxString baseKey = Compilers[i]->GetParentID().IsEmpty() ? _T("/sets") : _T("/user_sets");
         Compilers[i]->SaveSettings(baseKey);
 
+#if wxUSE_GUI
         CodeBlocksEvent event(cbEVT_COMPILER_SETTINGS_CHANGED);
         event.SetString(Compilers[i]->GetID());
         event.SetInt(static_cast<int>(i));
         event.SetClientData(static_cast<void*>(Compilers[i]));
         Manager::Get()->ProcessEvent(event);
+#endif // #if wxUSE_GUI
     }
 }
 
 void CompilerFactory::LoadSettings()
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     bool needAutoDetection = false;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     for (size_t i = 0; i < Compilers.GetCount(); ++i)
     {
         wxString baseKey = Compilers[i]->GetParentID().IsEmpty() ? _T("/sets") : _T("/user_sets");
         Compilers[i]->LoadSettings(baseKey);
 
+#if wxUSE_GUI
         CodeBlocksEvent event(cbEVT_COMPILER_SETTINGS_CHANGED);
         event.SetString(Compilers[i]->GetID());
         event.SetInt(static_cast<int>(i));
         event.SetClientData(static_cast<void*>(Compilers[i]));
         Manager::Get()->ProcessEvent(event);
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         if (Compilers[i]->GetMasterPath().IsEmpty())
         {
             Manager::Get()->GetLogManager()->DebugLog(F(_T("Master path of compiler ID \"%s\" is empty -> triggers auto-detection."), Compilers[i]->GetID().wx_str()));
             needAutoDetection = true;
         }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     // auto-detect missing compilers
     if (needAutoDetection)
     {
@@ -293,6 +306,7 @@
         adc.ShowModal();
         adc.Raise();
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 Compiler* CompilerFactory::SelectCompilerUI(const wxString& message, const wxString& preselectedID)
@@ -319,6 +333,7 @@
             }
         }
     }
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     // now display a choice dialog
     wxSingleChoiceDialog dlg(nullptr,
                              message,
@@ -330,6 +345,9 @@
     if (dlg.ShowModal() == wxID_OK)
         return Compilers[dlg.GetSelection()];
     return nullptr;
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+    return Compilers[selected];
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 wxString CompilerFactory::GetCompilerVersionString(const wxString& Id)
Index: src/sdk/configmanager.cpp
===================================================================
--- src/sdk/configmanager.cpp	(revision 9855)
+++ src/sdk/configmanager.cpp	(working copy)
@@ -872,6 +874,7 @@
     return false;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void ConfigManager::Write(const wxString& name,  const wxColour& c)
 {
     wxString key(name);
@@ -936,6 +939,7 @@
     *ret = wxNullColour;
     return false;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void ConfigManager::Write(const wxString& name,  int value)
 {
Index: src/sdk/filemanager.cpp
===================================================================
--- src/sdk/filemanager.cpp	(revision 9855)
+++ src/sdk/filemanager.cpp	(working copy)
@@ -12,11 +12,17 @@
 #ifndef CB_PRECOMP
     #include "filemanager.h"
     #include "safedelete.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "cbeditor.h"
     #include "editormanager.h"
+#endif // if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "infowindow.h"
 #endif
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "cbstyledtextctrl.h"
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#include "infowindow_base.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 #include <wx/url.h>
 #include <wx/encconv.h>
@@ -131,6 +137,7 @@
 //  urlLoaderThread.Die();
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 LoaderBase* FileManager::Load(const wxString& file, bool reuseEditors)
 {
     if (reuseEditors)
@@ -175,8 +182,8 @@
     fileLoaderThread.Queue(fl);
     return fl;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
-
 namespace platform
 {
 #if defined ( __WIN32__ ) || defined ( _WIN64 )
Index: src/sdk/globals.cpp
===================================================================
--- src/sdk/globals.cpp	(revision 9855)
+++ src/sdk/globals.cpp	(working copy)
@@ -15,10 +15,12 @@
     #include <wx/filesys.h>
     #include <wx/image.h>
     #include <wx/imaglist.h>
+#if wxUSE_GUI
     #include <wx/listctrl.h>
     #include <wx/menu.h>
 
     #include "wx/wxscintilla.h"
+#endif // #if wxUSE_GUI
 
     #include "cbexception.h"
     #include "configmanager.h" // ReadBool
@@ -31,10 +33,14 @@
 
 #include "tinyxml/tinyxml.h"
 
+#if wxUSE_GUI
 #include <wx/dirdlg.h>
+#endif // #if wxUSE_GUI
 #include <wx/filefn.h>
 #include <wx/fontmap.h>
+#if wxUSE_GUI
 #include <wx/msgdlg.h>
+#endif // #if wxUSE_GUI
 #include <wx/tokenzr.h>
 
 #include <algorithm>
@@ -413,6 +419,7 @@
     return wxEmptyString;
 }
 
+#if wxUSE_GUI
 void DoRememberSelectedNodes(wxTreeCtrl* tree, wxArrayString& selectedItemPaths)
 {
     wxArrayTreeItemIds items;
@@ -581,6 +588,7 @@
 
     selectedItemPaths.Clear();
 }
+#endif // #if wxUSE_GUI
 
 bool CreateDirRecursively(const wxString& full_path, int perms)
 {
@@ -611,6 +619,7 @@
     return true;
 }
 
+#if wxUSE_GUI
 wxString ChooseDirectory(wxWindow* parent,
                          const wxString& message,
                          const wxString& initialPath,
@@ -638,6 +647,7 @@
     }
     return path.GetFullPath();
 }
+#endif // #if wxUSE_GUI
 
 // Reads a wxString from a file. File must be open. File is closed automatically.
 bool cbRead(wxFile& file, wxString& st, wxFontEncoding encoding)
@@ -784,6 +794,7 @@
     return encoding;
 }
 
+#if wxUSE_GUI
 wxString GetEOLStr(int eolMode)
 {
     if (eolMode == -1)
@@ -803,6 +814,7 @@
           return wxT("\r\n");
     }
 }
+#endif // #if wxUSE_GUI
 
 wxString URLEncode(const wxString &str) // not sure this is 100% standards compliant, but I hope so
 {
@@ -883,6 +895,7 @@
     return ret; // return a list of the replaced expressions
 }
 
+#if wxUSE_GUI
 wxMenu* CopyMenu(wxMenu* mnu, bool with_accelerators)
 {
     if (!mnu || mnu->GetMenuItemCount() < 1)
@@ -913,6 +926,7 @@
     }
     return false;
 }
+#endif // #if wxUSE_GUI
 
 bool NormalizePath(wxFileName& f,const wxString& base)
 {
@@ -1014,6 +1028,7 @@
 }
 #endif
 
+#if wxUSE_GUI
 wxBitmap cbLoadBitmap(const wxString& filename, wxBitmapType bitmapType)
 {
     // cache this, can't change while we 're running :)
@@ -1034,8 +1049,10 @@
 
     return wxBitmap(im);
 }
+#endif // #if wxUSE_GUI
 
 // this doesn't work under wxGTK, and is only needed on wxMSW, we work around it on wxGTK
+#if wxUSE_GUI
 #ifdef __WXMSW__
 void SetSettingsIconsStyle(wxListCtrl* lc, SettingsIconsStyle style)
 {
@@ -1054,7 +1071,9 @@
 #else
 void SetSettingsIconsStyle(cb_unused wxListCtrl* lc, cb_unused SettingsIconsStyle style) {}
 #endif
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 SettingsIconsStyle GetSettingsIconsStyle(cb_unused wxListCtrl* lc)
 {
     return GetSettingsIconsStyle();
@@ -1064,7 +1083,9 @@
 {
     return SettingsIconsStyle(Manager::Get()->GetConfigManager(_T("app"))->ReadInt(_T("/environment/settings_size"), 0));
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 #ifdef __WXMSW__
 
 typedef APIENTRY HMONITOR (*MonitorFromWindow_t)(HWND, DWORD);
@@ -1246,6 +1267,7 @@
 }
 
 #endif //platform-specific placement code
+#endif // #if wxUSE_GUI
 
 DirAccessCheck cbDirAccessCheck(const wxString& dir)
 {
@@ -1371,6 +1393,7 @@
 #endif
 }
 
+#if wxUSE_GUI
 int cbMessageBox(const wxString& message, const wxString& caption, int style, wxWindow *parent, int x, int y)
 {
     if (!parent)
@@ -1402,7 +1425,15 @@
     // wxMessage*Dialog* returns any of wxID_OK, wxID_CANCEL, wxID_YES, wxID_NO
     return dlg.ShowModal();
 }
+#else
+int cbMessageBox(const wxString& message, const wxString& caption, int style, wxEvtHandler *parent, int x, int y)
+{
+    printf("\n%s:\n%s\n", static_cast<const char*>(caption.char_str()), static_cast<const char*>(message.char_str()));
+    return 0;
+}
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 wxImageList* cbProjectTreeImages::MakeImageList()
 {
     static const wxString imgs[] =
@@ -1476,3 +1507,4 @@
 {
     return (int)fvsVirtualFolder;
 }
+#endif // #if wxUSE_GUI
Index: src/sdk/loggers.cpp
===================================================================
--- src/sdk/loggers.cpp	(revision 9855)
+++ src/sdk/loggers.cpp	(working copy)
@@ -9,8 +9,10 @@
 
 #include "sdk_precomp.h"
 #ifndef CB_PRECOMP
+    #if wxUSE_GUI
     #include <wx/listctrl.h>
     #include <wx/textctrl.h>
+    #endif // #if wxUSE_GUI
     #include <wx/settings.h>
     #include "cbexception.h"
     #include "manager.h"
@@ -19,11 +21,16 @@
 
 #include <wx/clipbrd.h>
 #include <wx/dataobj.h>
+#if wxUSE_GUI
 #include <wx/wupdlock.h>
+#endif // #if wxUSE_GUI
 
 #include "loggers.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "cbcolourmanager.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI
 // Helper function which blends a colour with the default window text colour,
 // so that text will be readable in bright and dark colour schemes
 wxColour BlendTextColour(wxColour col)
@@ -46,7 +53,9 @@
     }
     return col;
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 TextCtrlLogger::TextCtrlLogger(bool fixedPitchFont) :
     control(nullptr), fixed(fixedPitchFont)
 {
@@ -68,6 +77,9 @@
 
 void TextCtrlLogger::UpdateSettings()
 {
+#ifdef CB_FOR_CONSOLE
+    return;
+#else
     if (!control)
         return;
 
@@ -126,6 +138,7 @@
 
     // Tell control about the font change
     control->SetFont(default_font);
+#endif // #ifdef CB_FOR_CONSOLE
 } // end of UpdateSettings
 
 void TextCtrlLogger::Append(const wxString& msg, Logger::level lv)
@@ -225,8 +238,9 @@
 #endif
     control->SetWindowStyleFlag(ctrl_style);
 }
+#endif // #if wxUSE_GUI
 
-
+#if wxUSE_GUI
 void TimestampTextCtrlLogger::Append(const wxString& msg, Logger::level lv)
 {
     if (!control)
@@ -238,7 +252,9 @@
     control->SetDefaultStyle(style[lv]);
     control->AppendText(::temp_string);
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 ListCtrlLogger::ListCtrlLogger(const wxArrayString& titles_in, const wxArrayInt& widths_in, bool fixedPitchFont) :
     control(nullptr),
     fixed(fixedPitchFont),
@@ -252,7 +268,9 @@
 {
     control = nullptr; // invalidate, do NOT destroy
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 void ListCtrlLogger::CopyContentsToClipboard(bool selectionOnly)
 {
     if (control && control->GetItemCount() > 0 && wxTheClipboard->Open())
@@ -422,7 +444,9 @@
         return false;
     }
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI
 CSS::CSS() :
     caption  (_T("font-size: 12pt;")),
     info     (wxEmptyString),
@@ -439,6 +463,7 @@
     critical += BlendTextColour(*wxRED).GetAsString(wxC2S_HTML_SYNTAX) + _T("; font-weight: bold;");
     failure  += BlendTextColour(wxColour(0x80, 0x00, 0x00)).GetAsString(wxC2S_HTML_SYNTAX) + _T(";");
 }
+#endif // #if wxUSE_GUI
 
 CSS::operator wxString()
 {
@@ -446,13 +471,14 @@
     return tmp;
 }
 
+#if wxUSE_GUI
 HTMLFileLogger::HTMLFileLogger(const wxString& filename)
 {
     Open(filename);
 }
+#endif // #if wxUSE_GUI
 
 
-
 void HTMLFileLogger::Append(const wxString& msg, cb_unused Logger::level lv)
 {
     fputs(wxSafeConvertWX2MB(msg), f.fp());
Index: src/sdk/logmanager.cpp
===================================================================
--- src/sdk/logmanager.cpp	(revision 9855)
+++ src/sdk/logmanager.cpp	(working copy)
@@ -17,7 +17,9 @@
 #include <wx/log.h>
 #endif
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "cbcolourmanager.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "logmanager.h"
 #include "loggers.h"
 
@@ -27,8 +29,11 @@
 static NullLogger g_null_log;
 
 LogSlot::LogSlot() :
-    log(nullptr),
+    log(nullptr)
+#if wxUSE_GUI
+    ,
     icon(nullptr)
+#endif // #if wxUSE_GUI
 {
 }
 
@@ -36,7 +41,9 @@
 {
     if (log != &g_null_log)
         delete log;
+#if wxUSE_GUI
     delete icon;
+#endif // #if wxUSE_GUI
 }
 
 size_t LogSlot::Index() const
@@ -73,6 +80,7 @@
     slot[app_log].title = _T("Code::Blocks");
     slot[debug_log].title = _T("Code::Blocks Debug");
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     ColourManager *manager = Manager::Get()->GetColourManager();
     manager->RegisterColour(_("Logs"), _("Success text"), wxT("logs_success_text"), *wxBLUE);
     manager->RegisterColour(_("Logs"), _("Warning text"), wxT("logs_warning_text"), *wxBLUE);
@@ -82,10 +90,13 @@
     manager->RegisterColour(_("Logs"), _("Critical text (ListCtrl)"),
                             wxT("logs_critical_text_listctrl"), wxColour(0x0a, 0x00, 0x00));
     manager->RegisterColour(_("Logs"), _("Failure text"), wxT("logs_failure_text"), wxColour(0x00, 0x00, 0xa0));
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     Register(_T("null"),   new Instantiator<NullLogger>);
     Register(_T("stdout"), new Instantiator<StdoutLogger>);
+#if wxUSE_GUI
     Register(_T("text"),   new Instantiator<TextCtrlLogger>);
+#endif // #if wxUSE_GUI
     Register(_T("file"),   new Instantiator<FileLogger, true>);
 }
 
Index: src/sdk/macrosmanager.cpp
===================================================================
--- src/sdk/macrosmanager.cpp	(revision 9855)
+++ src/sdk/macrosmanager.cpp	(working copy)
@@ -10,17 +10,23 @@
 #include "sdk_precomp.h"
 
 #ifndef CB_PRECOMP
+    #if wxUSE_GUI
     #include <wx/menu.h>
+    #endif // #if wxUSE_GUI
 
     #include "cbworkspace.h"
     #include "projectmanager.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "editormanager.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "logmanager.h"
     #include "macrosmanager.h"
     #include "scriptingmanager.h"
     #include "manager.h"
     #include "cbproject.h"
+    #if wxUSE_GUI
     #include "cbeditor.h"
+    #endif // #if wxUSE_GUI
     #include "uservarmanager.h"
     #include "configmanager.h"
     #include "globals.h"
@@ -29,12 +35,15 @@
 #endif
 
 #include <wx/stdpaths.h> // wxStandardPaths
+#include <wx/utils.h> 
 #include <cstdlib>
 
 #include "scripting/sqplus/sqplus.h"
 #include "scripting/bindings/scriptbindings.h"
 
+#if wxUSE_GUI
 #include "cbstyledtextctrl.h"
+#endif // #if wxUSE_GUI
 
 using namespace std;
 
@@ -56,6 +65,7 @@
 {
 }
 
+#if wxUSE_GUI
 void MacrosManager::CreateMenu(cb_unused wxMenuBar* menuBar)
 {
 }
@@ -63,6 +73,7 @@
 void MacrosManager::ReleaseMenu(cb_unused wxMenuBar* menuBar)
 {
 }
+#endif // #if wxUSE_GUI
 
 wxString MacrosManager::ReplaceMacros(const wxString& buffer, ProjectBuildTarget* target)
 {
@@ -178,6 +189,7 @@
 
 wxString GetSelectedText()
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     cbEditor* ed = Manager::Get()->GetEditorManager()->GetBuiltinActiveEditor();
     if (ed)
     {
@@ -194,6 +206,7 @@
             }
         }
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     return wxEmptyString;
 }
@@ -218,6 +231,7 @@
     m_ActiveEditorLine     = -1;            // invalidate
     m_ActiveEditorColumn   = -1;            // invalidate
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (editor)
     {
       // don't use pointer to editor here, because this might be the same,
@@ -239,6 +253,7 @@
           }
       }
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     if (!project)
     {
@@ -439,7 +454,9 @@
     cbProject* project = target
                         ? target->GetParentProject()
                         : Manager::Get()->GetProjectManager()->GetActiveProject();
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     EditorBase* editor = Manager::Get()->GetEditorManager()->GetActiveEditor();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     if (!target)
     {
@@ -453,8 +470,13 @@
                 target = project->GetBuildTarget(project->GetActiveBuildTarget());
         }
     }
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (project != m_LastProject || target != m_LastTarget || (editor && (editor->GetFilename() != m_ActiveEditorFilename)) )
         RecalcVars(project, editor, target);
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+    if (project != m_LastProject || target != m_LastTarget )
+        RecalcVars(project, 0l, target);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     wxString search;
     wxString replace;
Index: src/sdk/manager.cpp
===================================================================
--- src/sdk/manager.cpp	(revision 9855)
+++ src/sdk/manager.cpp	(working copy)
@@ -10,31 +10,45 @@
 #include "sdk_precomp.h"
 
 #ifndef CB_PRECOMP
+    #if wxUSE_GUI
     #include <wx/xrc/xmlres.h>
+    #endif // #if wxUSE_GUI
     #include <wx/fs_zip.h>
+    #if wxUSE_GUI
     #include <wx/menu.h>
+    #endif // #if wxUSE_GUI
 
     #include "manager.h" // class's header file
     #include "sdk_events.h"
     #include "cbexception.h"
     #include "projectmanager.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "editormanager.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "logmanager.h"
     #include "pluginmanager.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "toolsmanager.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "macrosmanager.h"
     #include "configmanager.h"
     #include "scriptingmanager.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "templatemanager.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "personalitymanager.h"
     #include "uservarmanager.h"
     #include "filemanager.h"
     #include "globals.h"
+    #if wxUSE_GUI
     #include "xtra_res.h" // our new ToolBarAddOn handler
+    #endif // #if wxUSE_GUI
 #endif
 
 #include <wx/app.h>    // wxTheApp
+#if wxUSE_GUI
 #include <wx/toolbar.h>
+#endif // #if wxUSE_GUI
 #include <wx/fs_mem.h>
 
 
@@ -44,9 +58,13 @@
     #include <cstdlib>   // free the memory created by abi::__cxa_demangle
 #endif // PPRCESS_EVENT_PERFORMANCE_MEASURE
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "cbcolourmanager.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#if wxUSE_GUI
 #include "ccmanager.h"
 #include "debuggermanager.h"
+#endif // #if wxUSE_GUI
 
 static Manager* s_ManagerInstance = nullptr;
 
@@ -119,7 +137,13 @@
 }
 #endif // PPRCESS_EVENT_PERFORMANCE_MEASURE
 
-Manager::Manager() : m_pAppWindow(nullptr), m_SearchResultLog(nullptr)
+Manager::Manager()
+#if wxUSE_GUI 
+: m_pAppWindow(nullptr)
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+, m_SearchResultLog(nullptr)
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#endif // #if wxUSE_GUI
 {
 }
 
@@ -153,6 +177,7 @@
         }
     }
 
+#if wxUSE_GUI
     for (LogEventSinksMap::iterator mit = m_LogEventSinks.begin(); mit != m_LogEventSinks.end(); ++mit)
     {
         while (mit->second.size())
@@ -161,13 +186,14 @@
             mit->second.erase(mit->second.begin());
         }
     }
+#endif // #if wxUSE_GUI
 
 //    Shutdown();
     CfgMgrBldr::Free(); // only terminate config at the very last moment
 //    FileManager::Free();
 }
 
-
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 Manager* Manager::Get(wxFrame *appWindow)
 {
     if (appWindow)
@@ -183,6 +209,7 @@
     }
     return Get();
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 Manager* Manager::Get()
 {
@@ -233,13 +260,17 @@
 {
     m_AppShuttingDown = true;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     ToolsManager::Free();
     TemplateManager::Free();
     CCManager::Free();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     PluginManager::Free();
     ScriptingManager::Free();
     ProjectManager::Free();
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     EditorManager::Free();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     PersonalityManager::Free();
     MacrosManager::Free();
     UserVariableManager::Free();
@@ -319,6 +350,7 @@
     return true;
 }
 
+#if wxUSE_GUI
 bool Manager::ProcessEvent(CodeBlocksLogEvent& event)
 {
     if (IsAppShuttingDown())
@@ -332,6 +364,7 @@
     }
     return true;
 }
+#endif // #if wxUSE_GUI
 
 bool Manager::IsAppShuttingDown()
 {
@@ -343,6 +376,7 @@
     return m_AppStartedUp;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void Manager::InitXRC(bool force)
 {
     static bool xrcok = false;
@@ -428,16 +462,19 @@
 {
     return (wxWindow*)m_pAppWindow;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 ProjectManager* Manager::GetProjectManager() const
 {
     return ProjectManager::Get();
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 EditorManager* Manager::GetEditorManager() const
 {
     return EditorManager::Get();
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 LogManager* Manager::GetLogManager() const
 {
@@ -449,10 +486,12 @@
     return PluginManager::Get();
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 ToolsManager* Manager::GetToolsManager() const
 {
     return ToolsManager::Get();
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 MacrosManager* Manager::GetMacrosManager() const
 {
@@ -484,6 +523,7 @@
     return FileManager::Get();
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 DebuggerManager* Manager::GetDebuggerManager() const
 {
     return DebuggerManager::Get();
@@ -498,7 +538,9 @@
 {
     return CCManager::Get();
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI
 bool Manager::LoadResource(const wxString& file)
 {
     wxString resourceFile = ConfigManager::LocateDataFile(file, sdDataGlobal | sdDataUser);
@@ -539,6 +581,7 @@
         return false;
     }
 }
+#endif // #if wxUSE_GUI
 
 wxCmdLineParser* Manager::GetCmdLineParser()
 {
@@ -560,10 +603,12 @@
     m_LayoutEventSinks[eventType].push_back(functor);
 }
 
+#if wxUSE_GUI
 void Manager::RegisterEventSink(wxEventType eventType, IEventFunctorBase<CodeBlocksLogEvent>* functor)
 {
     m_LogEventSinks[eventType].push_back(functor);
 }
+#endif // #if wxUSE_GUI
 
 void Manager::RemoveAllEventSinksFor(void* owner)
 {
@@ -621,6 +666,7 @@
         }
     }
 
+#if wxUSE_GUI
     for (LogEventSinksMap::iterator mit = m_LogEventSinks.begin(); mit != m_LogEventSinks.end(); ++mit)
     {
         LogEventSinksArray::iterator it = mit->second.begin();
@@ -638,6 +684,7 @@
                 ++it;
         }
     }
+#endif // #if wxUSE_GUI
 }
 
 bool            Manager::m_AppShuttingDown = false;
Index: src/sdk/pipedprocess.cpp
===================================================================
--- src/sdk/pipedprocess.cpp	(revision 9855)
+++ src/sdk/pipedprocess.cpp	(working copy)
@@ -176,7 +176,9 @@
         msg << serr.ReadLine();
 
         CodeBlocksEvent event(cbEVT_PIPEDPROCESS_STDERR, m_Id);
+#if wxUSE_GUI
         event.SetString(msg);
+#endif // #if wxUSE_GUI
         wxPostEvent(m_Parent, event);
 //         m_Parent->ProcessEvent(event);
 
@@ -191,7 +193,9 @@
         msg << sout.ReadLine();
 
         CodeBlocksEvent event(cbEVT_PIPEDPROCESS_STDOUT, m_Id);
+#if wxUSE_GUI
         event.SetString(msg);
+#endif // #if wxUSE_GUI
         wxPostEvent(m_Parent, event);
 //         m_Parent->ProcessEvent(event);
 
@@ -208,7 +212,9 @@
         ;
 
     CodeBlocksEvent event(cbEVT_PIPEDPROCESS_TERMINATED, m_Id);
+#if wxUSE_GUI
     event.SetInt(status);
+#endif // #if wxUSE_GUI
 //       m_Parent->ProcessEvent(event);
     wxPostEvent(m_Parent, event);
 
Index: src/sdk/pluginmanager.cpp
===================================================================
--- src/sdk/pluginmanager.cpp	(revision 9855)
+++ src/sdk/pluginmanager.cpp	(working copy)
@@ -13,7 +13,9 @@
     #include <wx/dir.h>
     #include <wx/filesys.h>
     #include <wx/intl.h>
+#if wxUSE_GUI
     #include <wx/menu.h>
+#endif // #if wxUSE_GUI
     #include <wx/string.h>
 
     #include "pluginmanager.h"
@@ -23,7 +25,9 @@
     #include "logmanager.h"
     #include "macrosmanager.h"
     #include "manager.h"
+    #if wxUSE_GUI
     #include "editormanager.h"
+    #endif // #if wxUSE_GUI
     #include "configmanager.h"
     #include "personalitymanager.h"
     #include "scriptingmanager.h"
@@ -33,7 +37,9 @@
 
 #include <wx/dynlib.h>
 #include <wx/filesys.h>
+#if wxUSE_GUI
 #include <wx/progdlg.h>
+#endif // #if wxUSE_GUI
 #include <wx/utils.h>
 #include <wx/filename.h>
 
@@ -44,10 +50,16 @@
 #include "filefilters.h"
 #include "tinyxml/tinyxml.h"
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "annoyingdialog.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "pluginsconfigurationdlg.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "scripting/bindings/sc_plugin.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 template<> PluginManager* Mgr<PluginManager>::instance = nullptr;
 template<> bool  Mgr<PluginManager>::isShutdown = false;
@@ -158,16 +170,20 @@
 //static
 bool PluginManager::s_SafeMode = false;
 
+#if wxUSE_GUI
 BEGIN_EVENT_TABLE(PluginManager, wxEvtHandler)
 //
 END_EVENT_TABLE()
+#endif // #if wxUSE_GUI
 
 // class constructor
 PluginManager::PluginManager()
     : m_pCurrentlyLoadingLib(nullptr),
     m_pCurrentlyLoadingManifestDoc(nullptr)
 {
+#if wxUSE_GUI
     Manager::Get()->GetAppWindow()->PushEventHandler(this);
+#endif // #if wxUSE_GUI
 }
 
 // class destructor
Index: src/sdk/projectfile.cpp
===================================================================
--- src/sdk/projectfile.cpp	(revision 9855)
+++ src/sdk/projectfile.cpp	(working copy)
@@ -20,7 +20,9 @@
     #include "globals.h"
 #endif
 
+#if wxUSE_GUI
 #include "projectfileoptionsdlg.h"
+#endif // #if wxUSE_GUI
 #include "filefilters.h"
 
 ProjectFile::ProjectFile(cbProject* prj) :
@@ -141,12 +143,14 @@
     return buildTargets;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 bool ProjectFile::ShowOptions(wxWindow* parent)
 {
     ProjectFileOptionsDlg dlg(parent, this);
     PlaceWindow(&dlg);
     return dlg.ShowModal() == wxID_OK;
 }
+#endif //#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 wxString ProjectFile::GetBaseName() const
 {
@@ -290,6 +294,7 @@
     return *pfd;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 FileVisualState ProjectFile::GetFileState() const
 {
     return m_VisualState;
@@ -308,6 +313,7 @@
         }
     }
 }
+#endif //#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void ProjectFile::SetUseCustomBuildCommand(const wxString& compilerId, bool useCustomBuildCommand)
 {
@@ -474,9 +480,11 @@
             }
             else if (ft == ftStaticLib || ft == ftDynamicLib)
             {
+
                 cbMessageBox(_("You have added a static/dynamic library to the project files and enabled to link against it. "
                                "This is likely to fail as Code::Blocks cannot control the link order which is relevant.\n"
                                "Instead, add the library to the project linker options."), _("Error"), wxICON_ERROR | wxOK);
+
                 // This will be wrong and most likely not working but spoil the build process
                 object_file_native      = obj_file_full_path;
                 object_file_flat_native = fname.GetFullName();
Index: src/sdk/projectloader.cpp
===================================================================
--- src/sdk/projectloader.cpp	(revision 9855)
+++ src/sdk/projectloader.cpp	(working copy)
@@ -14,7 +14,9 @@
     #include <wx/fileconf.h>
     #include <wx/intl.h>
     #include <wx/filename.h>
+    #if wxUSE_GUI
     #include <wx/msgdlg.h>
+    #endif // #if wxUSE_GUI
     #include <wx/stopwatch.h>
     #include "manager.h"
     #include "configmanager.h"
@@ -33,7 +35,9 @@
 #include "filefilters.h"
 #include "projectloader.h"
 #include "projectloader_hooks.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "annoyingdialog.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "configmanager.h"
 #include "tinyxml/tinywxuni.h"
 #include "filegroupsandmasks.h"
@@ -114,12 +118,14 @@
         else if (major >= PROJECT_FILE_VERSION_MAJOR && minor > PROJECT_FILE_VERSION_MINOR)
         {
             pMsg->DebugLog(F(_T("Project version is > %d.%d. Trying to load..."), PROJECT_FILE_VERSION_MAJOR, PROJECT_FILE_VERSION_MINOR));
+#if wxUSE_GUI
             AnnoyingDialog dlg(_("Project file format is newer/unknown"),
                                 _("This project file was saved with a newer version of Code::Blocks.\n"
                                 "Will try to load, but you should make sure all the settings were loaded correctly..."),
                                 wxART_WARNING,
                                 AnnoyingDialog::OK);
             dlg.ShowModal();
+#endif // #if wxUSE_GUI
         }
         else
         {
@@ -174,21 +180,29 @@
                                             minor,
                                             PROJECT_FILE_VERSION_MAJOR,
                                             PROJECT_FILE_VERSION_MINOR));
+#if wxUSE_GUI
                 AnnoyingDialog dlg(_("Project file format changed"),
                                     msg,
                                     wxART_INFORMATION,
                                     AnnoyingDialog::OK);
                 dlg.ShowModal();
+#else  // #if wxUSE_GUI
+    #pragma message "Needs code added"
+#endif // #if wxUSE_GUI
             }
 
             if (!warn_msg.IsEmpty())
             {
                 warn_msg.Prepend(_("!!! WARNING !!!\n\n"));
+#if wxUSE_GUI
                 AnnoyingDialog dlg(_("Project file upgrade warning"),
                                     warn_msg,
                                     wxART_WARNING,
                                     AnnoyingDialog::OK);
                 dlg.ShowModal();
+#else  // #if wxUSE_GUI
+    #pragma message "Needs code added"
+#endif // #if wxUSE_GUI
             }
         }
     }
@@ -272,6 +286,7 @@
                 "Do you want to auto-detect the libraries \"%s\" is using and configure it accordingly?"),
                 m_pProject->GetTitle().c_str(),
                 m_pProject->GetTitle().c_str());
+#if wxUSE_GUI
     if (cbMessageBox(msg, _("Question"), wxICON_QUESTION | wxYES_NO) == wxID_YES)
     {
         // project first
@@ -283,6 +298,9 @@
             m_Upgraded = true;
         }
     }
+#else  // #if wxUSE_GUI
+    #pragma message "Needs code added"
+#endif // #if wxUSE_GUI
 }
 
 void ProjectLoader::ConvertLibraries(CompileTargetBase* object)
@@ -396,7 +414,9 @@
     wxArrayString vfolders;
     int platformsFinal = spAll;
     PCHMode pch_mode = m_IsPre_1_2 ? pchSourceDir : pchObjectDir;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     bool showNotes = false;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     wxString notes;
 
     // loop through all options
@@ -442,6 +462,7 @@
         else if (node->Attribute("virtualFolders"))
             vfolders = GetArrayFromString(cbC2U(node->Attribute("virtualFolders")), _T(";"));
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         else if (node->Attribute("show_notes"))
         {
             TiXmlHandle parentHandle(node);
@@ -450,6 +471,7 @@
                 notes = cbC2U(t->Value());
             showNotes = !notes.IsEmpty() && strncmp(node->Attribute("show_notes"), "1", 1) == 0;
         }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         node = node->NextSiblingElement("Option");
     }
@@ -463,9 +485,11 @@
     m_pProject->SetCompilerID(compilerId);
     m_pProject->SetExtendedObjectNamesGeneration(extendedObjectNames);
     m_pProject->SetModeForPCH(pch_mode);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pProject->SetVirtualFolders(vfolders);
     m_pProject->SetNotes(notes);
     m_pProject->SetShowNotesOnLoad(showNotes);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     DoMakeCommands(parentNode->FirstChildElement("MakeCommands"), m_pProject);
     DoVirtualTargets(parentNode->FirstChildElement("VirtualTargets"));
@@ -1166,6 +1190,7 @@
     }
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 // convenience function, used in Save()
 void ProjectLoader::SaveEnvironment(TiXmlElement* parent, CompileOptionsBase* base)
 {
@@ -1586,6 +1611,7 @@
 
     return cbSaveTinyXMLDocument(&doc, filename);
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 wxString ProjectLoader::GetValidCompilerID(const wxString& proposal, const wxString& scope)
 {
@@ -1608,6 +1634,7 @@
             compiler = CompilerFactory::GetCompiler(idx);
     }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (!compiler)
     {
         if(!(Manager::Get()->GetConfigManager(_T("app"))->ReadBool(_T("/environment/ignore_invalid_targets"), true)))
@@ -1620,6 +1647,7 @@
             compiler = CompilerFactory::SelectCompilerUI(msg);
         }
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     if (!compiler)
     {
Index: src/sdk/projectmanager.cpp
===================================================================
--- src/sdk/projectmanager.cpp	(revision 9855)
+++ src/sdk/projectmanager.cpp	(working copy)
@@ -21,18 +21,26 @@
     #include "cbproject.h"
     #include "logmanager.h"
     #include "pluginmanager.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "editormanager.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include "uservarmanager.h"
     #include "workspaceloader.h"
     #include "cbworkspace.h"
+    #if wxUSE_GUI
     #include "cbeditor.h"
+    #endif // #if wxUSE_GUI
     #include "globals.h"
     #include "cbexception.h"  // for cbassert
 #endif
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/progdlg.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI
 #include "cbauibook.h"
+#endif // #if wxUSE_GUI
 //#include "filefilters.h"
 #include "filegroupsandmasks.h"
 
@@ -46,6 +54,7 @@
 BEGIN_EVENT_TABLE(ProjectManager, wxEvtHandler)
 END_EVENT_TABLE()
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class NullProjectManagerUI : public cbProjectManagerUI
 {
     public:
@@ -70,10 +79,13 @@
         void ConfigureProjectDependencies(cbProject* base = nullptr) { (void)base; }
         void SwitchToProjectsPage() {}
 };
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 // class constructor
 ProjectManager::ProjectManager() :
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_ui(new NullProjectManagerUI),
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pWorkspace(nullptr),
     m_IsLoadingProject(false),
     m_IsLoadingWorkspace(false),
@@ -97,7 +109,10 @@
     // Event handling. This must be THE LAST THING activated on startup.
     // Constructors and destructors must always follow the LIFO rule:
     // Last in, first out.
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     Manager::Get()->GetAppWindow()->PushEventHandler(this);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+
 }
 
 // class destructor
@@ -274,6 +289,7 @@
     return result;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void ProjectManager::ReloadProject(cbProject *project)
 {
     m_ui->FreezeTree();
@@ -346,7 +362,9 @@
 
     m_ui->UnfreezeTree();
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI
 cbProject* ProjectManager::NewProject(const wxString& filename)
 {
     if (!filename.IsEmpty() && wxFileExists(filename))
@@ -374,9 +392,11 @@
     }
     return prj;
 }
+#endif // #if wxUSE_GUI
 
 bool ProjectManager::CloseAllProjects(bool dontsave)
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (!dontsave)
     {
         if (!m_ui->QueryCloseAllProjects())
@@ -384,6 +404,7 @@
     }
 
     m_ui->FreezeTree();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_IsClosingProject = true;
     while (m_pProjects->GetCount() != 0)
     {
@@ -391,20 +412,26 @@
 //        if (!CloseActiveProject(true))
         if (!CloseProject(m_pProjects->Item(0), true, false))
         {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             m_ui->UnfreezeTree(true);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             m_IsClosingProject = false;
             return false;
         }
     }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (!Manager::IsAppShuttingDown())
         m_ui->RebuildTree();
     m_ui->UnfreezeTree(true);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     if (!m_InitialDir.IsEmpty())
         wxFileName::SetCwd(m_InitialDir);
     m_IsClosingProject = false;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     WorkspaceChanged();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     return true;
 }
@@ -415,11 +442,13 @@
         return true;
     if (project->GetCurrentlyCompilingTarget())
         return false;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (!dontsave)
     {
          if (!m_ui->QueryCloseProject(project))
             return false;
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     bool wasActive = project == m_pActiveProject;
     if (wasActive)
@@ -433,11 +462,13 @@
     // the state of m_IsClosingProject.
     bool isClosingOtherProjects = m_IsClosingProject;
     m_IsClosingProject = true;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     Manager::Get()->GetEditorManager()->UpdateProjectFiles(project);
     project->SaveLayout();
 
     if (m_pWorkspace)
         m_pWorkspace->SetModified(true);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     RemoveProjectFromAllDependencies(project);
     m_pProjects->Remove(project);
@@ -448,16 +479,21 @@
     event.SetProject(project);
     Manager::Get()->GetPluginManager()->NotifyPlugins(event);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     project->CloseAllFiles(true);
     if (refresh)
         m_ui->RemoveProject(project);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (wasActive && m_pProjects->GetCount())
         SetProject(m_pProjects->Item(0), refresh);
     delete project;
     if (!m_InitialDir.IsEmpty()) // Restore the working directory
         wxFileName::SetCwd(m_InitialDir);
     m_IsClosingProject = isClosingOtherProjects;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     WorkspaceChanged();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+
     return true;
 }
 
@@ -470,6 +506,7 @@
     return true;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 bool ProjectManager::SaveProject(cbProject* project)
 {
     if (!project)
@@ -523,6 +560,7 @@
     m_ui->UnfreezeTree(true);
     return count == prjCount;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 cbWorkspace* ProjectManager::GetWorkspace()
 {
@@ -530,7 +568,9 @@
     {
         m_pWorkspace = new cbWorkspace(_T(""));
         m_pWorkspace->SetTitle(_("Workspace"));
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         m_pWorkspace->SetModified(false);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     }
     return m_pWorkspace;
 }
@@ -559,6 +599,7 @@
     return false;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 bool ProjectManager::SaveWorkspace()
 {
     return GetWorkspace()->Save();
@@ -599,6 +640,7 @@
     WorkspaceChanged();
     return result;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 // This function is static for your convenience :)
 bool ProjectManager::IsBusy()
@@ -643,7 +685,7 @@
     return m_IsClosingWorkspace;
 }
 
-
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 int ProjectManager::DoAddFileToProject(const wxString& filename, cbProject* project, wxArrayInt& targets)
 {
     if (!project)
@@ -760,6 +802,7 @@
 
     return targets.GetCount();
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 bool ProjectManager::CausesCircularDependency(cbProject* base, cbProject* dependsOn)
 {
@@ -809,8 +852,10 @@
     if (arr && arr->Index(dependsOn) == wxNOT_FOUND)
     {
         arr->Add(dependsOn);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         if (m_pWorkspace)
             m_pWorkspace->SetModified(true);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         Manager::Get()->GetLogManager()->DebugLog(F(_T("%s now depends on %s (%lu deps)"), base->GetTitle().wx_str(), dependsOn->GetTitle().wx_str(), static_cast<unsigned long>(arr->GetCount())));
     }
     return true;
@@ -835,8 +880,10 @@
         m_ProjectDeps.erase(it);
         delete arr;
     }
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (m_pWorkspace)
         m_pWorkspace->SetModified(true);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 void ProjectManager::ClearProjectDependencies(cbProject* base)
@@ -849,8 +896,10 @@
 
     delete it->second;
     m_ProjectDeps.erase(it);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (m_pWorkspace)
         m_pWorkspace->SetModified(true);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     Manager::Get()->GetLogManager()->DebugLog(_T("Removed all deps from ") + base->GetTitle());
 }
@@ -880,8 +929,10 @@
         if (index != wxNOT_FOUND)
             arr->RemoveAt(index);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         if (m_pWorkspace)
             m_pWorkspace->SetModified(true);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         // if it was the last dependency, delete the array
         if (!arr->GetCount())
@@ -915,6 +966,7 @@
     event.Skip();
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void ProjectManager::WorkspaceChanged()
 {
     // We use IsBusy() to check *ALL* the conditions: If we're in the process of
@@ -956,6 +1008,7 @@
 
     Manager::Get()->GetLogManager()->DebugLog(_T("Removed ") + filename + _T(" from ") + project->GetTitle());
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 bool ProjectManager::BeginLoadingProject()
 {
@@ -965,6 +1018,7 @@
     if (!Manager::Get()->GetPluginManager()->FindPluginByName(_T("Compiler")))
     {
         cbMessageBox(_("Deactivating the compiler plugin is most unwise.\n\nIf you intend to open a project, you have to re-activate the compiler plugin first."), _("Error"));
+
         return false;
     }
 
@@ -988,14 +1042,18 @@
         if (newAddition)
         {
             m_pProjects->Add(project);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             project->LoadLayout();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         if (!m_IsLoadingWorkspace)
             m_ui->FinishLoadingProject(project, newAddition, m_pFileGroups);
 
         if (m_pWorkspace)
             m_pWorkspace->SetModified(true);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         // if loading a workspace, avoid sending the event now
         // we 'll send them after all projects have been loaded
@@ -1009,9 +1067,11 @@
             event.SetProject(project);
             Manager::Get()->ProcessEvent(event);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             // finally, display project notes (if appropriate)
             if (project->GetShowNotesOnLoad())
                 project->ShowNotes(true);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         }
     }
 
@@ -1024,7 +1084,9 @@
     if (!m_IsLoadingWorkspace)
         Manager::Get()->GetUserVariableManager()->Arrogate();
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     WorkspaceChanged();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 bool ProjectManager::BeginLoadingWorkspace()
@@ -1033,6 +1095,7 @@
         return false;
 
     m_IsLoadingWorkspace = true;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (!CloseWorkspace())
     {
         m_IsLoadingWorkspace = false;
@@ -1040,6 +1103,7 @@
     }
 
     m_ui->BeginLoadingWorkspace();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     return true;
 }
@@ -1055,6 +1119,7 @@
 
     if (m_pWorkspace->IsOK())
     {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         if (m_pProjectToActivate)
         {
             SetProject(m_pProjectToActivate, true);
@@ -1062,11 +1127,14 @@
         }
 
         m_ui->FinishLoadingWorkspace(m_pActiveProject, m_pWorkspace->GetTitle());
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         // sort out any global user vars that need to be defined now (in a batch) :)
         Manager::Get()->GetUserVariableManager()->Arrogate();
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         int numNotes = 0;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         // and now send the project loaded events
         // since we were loading a workspace, these events were not sent before
@@ -1081,11 +1149,14 @@
             event.SetProject(project);
             Manager::Get()->GetPluginManager()->NotifyPlugins(event);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             // since we 're iterating anyway, let's count the project notes that should be displayed
             if (project->GetShowNotesOnLoad() && !project->GetNotes().IsEmpty())
                 ++numNotes;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         // finally, display projects notes (if appropriate)
         if (numNotes)
         {
@@ -1106,9 +1177,12 @@
         }
 
         WorkspaceChanged();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     }
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     else
         CloseWorkspace();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 void ProjectManager::SetIsRunning(cbPlugin *plugin)
Index: src/sdk/scripting/bindings/sc_consts.cpp
===================================================================
--- src/sdk/scripting/bindings/sc_consts.cpp	(revision 9855)
+++ src/sdk/scripting/bindings/sc_consts.cpp	(working copy)
@@ -128,6 +128,7 @@
         BIND_INT_CONSTANT(pchObjectDir);
         BIND_INT_CONSTANT(pchSourceFile);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         // printing scope for print dialog
         BIND_INT_CONSTANT(psSelection);
         BIND_INT_CONSTANT(psActiveEditor);
@@ -138,6 +139,7 @@
         BIND_INT_CONSTANT(pcmColourOnWhite);
         BIND_INT_CONSTANT(pcmInvertColours);
         BIND_INT_CONSTANT(pcmAsIs);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         // TemplateOutputType
         BIND_INT_CONSTANT_NAMED(totProject, "wizProject");
@@ -179,6 +181,7 @@
         BIND_INT_CONSTANT(mtOpenFilesList);
         BIND_INT_CONSTANT(mtUnknown);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         // FileTreeDataKind
         BIND_INT_CONSTANT_NAMED(FileTreeData::ftdkUndefined, "ftdkUndefined");
         BIND_INT_CONSTANT_NAMED(FileTreeData::ftdkProject, "ftdkProject");
@@ -186,6 +189,7 @@
         BIND_INT_CONSTANT_NAMED(FileTreeData::ftdkFile, "ftdkFile");
         BIND_INT_CONSTANT_NAMED(FileTreeData::ftdkVirtualGroup, "ftdkVirtualGroup");
         BIND_INT_CONSTANT_NAMED(FileTreeData::ftdkVirtualFolder, "ftdkVirtualFolder");
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         // file extensions
         BIND_WXSTR_CONSTANT_NAMED(FileFilters::WORKSPACE_EXT, "EXT_WORKSPACE");
Index: src/sdk/scripting/bindings/sc_io.cpp
===================================================================
--- src/sdk/scripting/bindings/sc_io.cpp	(revision 9855)
+++ src/sdk/scripting/bindings/sc_io.cpp	(working copy)
@@ -11,7 +11,9 @@
 #include <manager.h>
 #include <macrosmanager.h>
 #include <configmanager.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <annoyingdialog.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 #ifndef CB_PRECOMP
     #include <globals.h>
Index: src/sdk/scripting/bindings/sc_wxtypes.cpp
===================================================================
--- src/sdk/scripting/bindings/sc_wxtypes.cpp	(revision 9855)
+++ src/sdk/scripting/bindings/sc_wxtypes.cpp	(working copy)
@@ -40,6 +40,7 @@
     //////////////
     // wxColour //
     //////////////
+#if wxUSE_GUI
     SQInteger wxColour_OpToString(HSQUIRRELVM v)
     {
         StackHandler sa(v);
@@ -47,6 +48,7 @@
         wxString str = wxString::Format(_T("[r=%d, g=%d, b=%d]"), self.Red(), self.Green(), self.Blue());
         return sa.Return((const SQChar*)str.mb_str(wxConvUTF8));
     }
+#endif // #if wxUSE_GUI
 
     ////////////////
     // wxFileName //
@@ -61,7 +63,7 @@
     /////////////
     // wxPoint //
     /////////////
-
+#if wxUSE_GUI
     // wxPoint operator==
     SQInteger wxPoint_OpCmp(HSQUIRRELVM v)
     {
@@ -82,6 +84,7 @@
         wxPoint& self = *SqPlus::GetInstance<wxPoint,false>(v, 1);
         return sa.Return((SQInteger)(self.y));
     }
+#endif // #if wxUSE_GUI
 
     //////////////
     // wxString //
@@ -262,6 +265,7 @@
         //////////////
         // wxColour //
         //////////////
+#if wxUSE_GUI
         typedef void(wxColour::*WXC_SET)(const unsigned char, const unsigned char, const unsigned char, const unsigned char);
         SqPlus::SQClassDef<wxColour>("wxColour").
                 emptyCtor().
@@ -273,6 +277,7 @@
                 func(&wxColour::IsOk, "IsOk").
 #endif
                 func<WXC_SET>(&wxColour::Set, "Set");
+#endif // #if wxUSE_GUI
 
         ////////////////
         // wxFileName //
@@ -334,15 +339,18 @@
         /////////////
         // wxPoint //
         /////////////
+#if wxUSE_GUI
         SqPlus::SQClassDef<wxPoint>("wxPoint").
                 emptyCtor().
                 staticFuncVarArgs(&wxPoint_OpCmp, "_cmp", "*").
                 var(&wxPoint::x, "x").
                 var(&wxPoint::y, "y");
+#endif // #if wxUSE_GUI
 
         ////////////
         // wxSize //
         ////////////
+#if wxUSE_GUI
         typedef void(wxSize::*WXS_SET)(int, int);
         typedef void(wxSize::*WXS_SETH)(int);
         typedef void(wxSize::*WXS_SETW)(int);
@@ -353,6 +361,7 @@
                 func<WXS_SET>(&wxSize::Set, "Set").
                 func<WXS_SETH>(&wxSize::SetHeight, "SetHeight").
                 func<WXS_SETW>(&wxSize::SetWidth, "SetWidth");
+#endif // #if wxUSE_GUI
 
         //////////////
         // wxString //
Index: src/sdk/scripting/bindings/scriptbindings.cpp
===================================================================
--- src/sdk/scripting/bindings/scriptbindings.cpp	(revision 9855)
+++ src/sdk/scripting/bindings/scriptbindings.cpp	(working copy)
@@ -18,7 +18,9 @@
     #include <macrosmanager.h>
     #include <compilerfactory.h>
     #include <cbproject.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include <cbeditor.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include <globals.h>
 #endif
 #include "cbstyledtextctrl.h"
Index: src/sdk/sdk_events.cpp
===================================================================
--- src/sdk/sdk_events.cpp	(revision 9855)
+++ src/sdk/sdk_events.cpp	(working copy)
@@ -12,7 +12,9 @@
 #ifndef CB_PRECOMP
     #include "sdk_events.h"
     #include "cbproject.h"
+    #if wxUSE_GUI
     #include "editorbase.h"
+    #endif // #if wxUSE_GUI
     #include "cbplugin.h"
     #include "logmanager.h"
 #endif
@@ -21,10 +23,15 @@
 IMPLEMENT_DYNAMIC_CLASS(CodeBlocksEvent, wxEvent)
 IMPLEMENT_DYNAMIC_CLASS(CodeBlocksDockEvent, wxEvent)
 IMPLEMENT_DYNAMIC_CLASS(CodeBlocksLayoutEvent, wxEvent)
+#if wxUSE_GUI
 IMPLEMENT_DYNAMIC_CLASS(CodeBlocksLogEvent, wxEvent)
+#endif // #if wxUSE_GUI
+#if wxUSE_GUI
 IMPLEMENT_DYNAMIC_CLASS(CodeBlocksThreadEvent, wxCommandEvent)
+#endif // #if wxUSE_GUI
 
 
+#if wxUSE_GUI
 CodeBlocksLogEvent::CodeBlocksLogEvent(wxEventType commandType, Logger* logger_in, const wxString& title_in, wxBitmap *icon_in)
     : wxEvent(wxID_ANY, commandType),
     logger(logger_in), logIndex(-1), icon(icon_in), title(title_in), window(nullptr)
@@ -62,8 +69,8 @@
     : wxEvent(wxID_ANY, rhs.GetEventType()), logger(rhs.logger), logIndex(rhs.logIndex), icon(rhs.icon), title(rhs.title), window(rhs.window)
 {
 }
+#endif // #if wxUSE_GUI
 
-
 // app events
 const wxEventType cbEVT_APP_STARTUP_DONE = wxNewEventType();
 const wxEventType cbEVT_APP_START_SHUTDOWN = wxNewEventType();
Index: src/sdk/uservarmanager.cpp
===================================================================
--- src/sdk/uservarmanager.cpp	(revision 9855)
+++ src/sdk/uservarmanager.cpp	(working copy)
@@ -19,17 +19,29 @@
     #include "cbexception.h"
     #include "infowindow.h"
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include <wx/button.h>
     #include "scrollingdialog.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include <wx/intl.h>
+    #if wxUSE_GUI
     #include <wx/xrc/xmlres.h>
+    #endif // #if wxUSE_GUI
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     #include <wx/textctrl.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+    #if wxUSE_GUI
     #include <wx/splitter.h>
+    #endif // #if wxUSE_GUI
 #endif
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "annoyingdialog.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/choice.h>
 #include <wx/textdlg.h> //wxTextEntryDialog
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 #if wxCHECK_VERSION(2, 9, 0)
 #include <wx/unichar.h>
@@ -64,6 +76,7 @@
 };
 const wxArrayString builtinMembers((size_t) 7, bim);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class UsrGlblMgrEditDialog : public wxScrollingDialog
 {
     wxString m_CurrentSet;
@@ -122,8 +135,8 @@
     d.ShowModal();
     m_ActiveSet = Manager::Get()->GetConfigManager(_T("gcv"))->Read(_T("/active"));
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
-
 wxString UserVariableManager::Replace(const wxString& variable)
 {
     wxString package = variable.AfterLast(wxT('#')).BeforeFirst(wxT('.')).MakeLower();
@@ -150,10 +163,12 @@
                          "the global compiler variable \"%s\".\n\n"
                          "Please define it."), package.wx_str());
             InfoWindow::Display(_("Global Compiler Variables"), msg , 8000, 1000);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             UsrGlblMgrEditDialog d;
             d.AddVar(package);
             PlaceWindow(&d);
             d.ShowModal();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         }
     }
 
@@ -213,11 +228,15 @@
 
     wxString peList;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     UsrGlblMgrEditDialog d;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     for (unsigned int i = 0; i < m_Preempted.GetCount(); ++i)
     {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         d.AddVar(m_Preempted[i]);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         peList << m_Preempted[i] << _T('\n');
     }
     peList = peList.BeforeLast('\n'); // remove trailing newline
@@ -233,11 +252,15 @@
                      "%s\n\n"
                      "Please define them."), peList.wx_str());
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     PlaceWindow(&d);
     m_Preempted.Clear();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     InfoWindow::Display(_("Global Compiler Variables"), msg , 8000 + 800*m_Preempted.GetCount(), 100);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     d.ShowModal();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 UserVariableManager::UserVariableManager()
@@ -280,6 +303,7 @@
     cfgman_old->Delete();
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 BEGIN_EVENT_TABLE(UsrGlblMgrEditDialog, wxScrollingDialog)
     EVT_BUTTON(XRCID("cloneVar"), UsrGlblMgrEditDialog::CloneVar)
     EVT_BUTTON(XRCID("newVar"), UsrGlblMgrEditDialog::NewVar)
@@ -667,3 +691,4 @@
 {
     wxLaunchDefaultBrowser(_T("http://wiki.codeblocks.org/index.php?title=Global_compiler_variables"));
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
Index: src/sdk/workspaceloader.cpp
===================================================================
--- src/sdk/workspaceloader.cpp	(revision 9855)
+++ src/sdk/workspaceloader.cpp	(working copy)
@@ -110,8 +110,10 @@
             cbProject* pProject = GetpMan()->LoadProject(fname.GetFullPath(), false); // don't activate it
             if (!pProject)
             {
+
                 cbMessageBox(_("Unable to open ") + projectFilename,
                  _("Opening WorkSpace") + filename, wxICON_WARNING);
+
             }
         }
         proj = proj->NextSiblingElement("Project");
Index: src/src/app.cpp
===================================================================
--- src/src/app.cpp	(revision 9855)
+++ src/src/app.cpp	(working copy)
@@ -12,21 +12,27 @@
 #include <wx/arrstr.h>
 #include <wx/fs_zip.h>
 #include <wx/fs_mem.h>
+#if wxUSE_GUI
 #include <wx/xrc/xmlres.h>
+#endif // #if wxUSE_GUI
 #include <wx/cmdline.h>
 #include <wx/regex.h>
 #include <wx/filefn.h>
 #include <wx/log.h> // for wxSafeShowMessage()
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <wx/msgdlg.h>
 #include <wx/choicdlg.h>
 #include <wx/notebook.h>
 #include <wx/clipbrd.h>
 
 #include "cbauibook.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <cbexception.h>
 #include <wx/debugrpt.h>
 #include <configmanager.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <editormanager.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include <projectmanager.h>
 #include <personalitymanager.h>
 #include <pluginmanager.h>
@@ -36,19 +42,25 @@
 #include <globals.h>
 #include <logmanager.h>
 #include <loggers.h>
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "splashscreen.h"
 #include "crashhandler.h"
 #include "cbstyledtextctrl.h"
 #include <wx/ipc.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI
 #include "projectmanagerui.h"
+#endif // #if wxUSE_GUI
 
 #include <sqplus.h>
 
 #ifndef __WXMSW__
     #include "prefix.h" // binreloc
 #endif
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "associations.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 #if defined(__APPLE__) && defined(__MACH__)
 #include <sys/param.h>
@@ -59,7 +71,9 @@
 
 #ifndef CB_PRECOMP
     #include <wx/dir.h>
+#if wxUSE_GUI
     #include "xtra_res.h"
+#endif // #if wxUSE_GUI
     #include "filemanager.h" // LoaderBase
 #endif
 
@@ -73,11 +87,14 @@
 
 namespace
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 // this list will be filled with files (received through DDE or command line)
 // to be loaded after the app has started up
 wxArrayString s_DelayedFilesToOpen;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 bool s_Loading = false;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class DDEServer : public wxServer
 {
     public:
@@ -175,6 +192,7 @@
         DDEClient(void) {}
         wxConnectionBase *OnMakeConnection(void) { return new DDEConnection(nullptr); }
 };
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 #if wxUSE_CMDLINE_PARSER
 #if wxCHECK_VERSION(2, 9, 0)
@@ -188,6 +206,7 @@
       wxCMD_LINE_VAL_NONE, wxCMD_LINE_OPTION_HELP },
     { wxCMD_LINE_SWITCH, CMD_ENTRY("?"),  CMD_ENTRY("?"),                     CMD_ENTRY("show this help message (alias for help)"),
       wxCMD_LINE_VAL_NONE, wxCMD_LINE_OPTION_HELP },
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     { wxCMD_LINE_SWITCH, CMD_ENTRY(""),   CMD_ENTRY("safe-mode"),             CMD_ENTRY("load in safe mode (all plugins will be disabled)"),
       wxCMD_LINE_VAL_NONE, wxCMD_LINE_PARAM_OPTIONAL },
 #ifdef __WXMSW__
@@ -208,16 +227,23 @@
       wxCMD_LINE_VAL_NONE, wxCMD_LINE_PARAM_OPTIONAL },
     { wxCMD_LINE_SWITCH, CMD_ENTRY("nc"), CMD_ENTRY("no-crash-handler"),      CMD_ENTRY("don't use the crash handler (useful for debugging C::B)"),
       wxCMD_LINE_VAL_NONE, wxCMD_LINE_PARAM_OPTIONAL },
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     { wxCMD_LINE_SWITCH, CMD_ENTRY("v"),  CMD_ENTRY("verbose"),               CMD_ENTRY("show more debugging messages"),
       wxCMD_LINE_VAL_NONE, wxCMD_LINE_PARAM_OPTIONAL },
     { wxCMD_LINE_OPTION, CMD_ENTRY(""),   CMD_ENTRY("prefix"),                CMD_ENTRY("the shared data dir prefix"),
       wxCMD_LINE_VAL_STRING, wxCMD_LINE_NEEDS_SEPARATOR },
     { wxCMD_LINE_OPTION, CMD_ENTRY(""),   CMD_ENTRY("user-data-dir"),         CMD_ENTRY("set a custom location for user settings and plugins"),
       wxCMD_LINE_VAL_STRING, wxCMD_LINE_NEEDS_SEPARATOR },
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     { wxCMD_LINE_OPTION, CMD_ENTRY("p"),  CMD_ENTRY("personality"),           CMD_ENTRY("the personality to use: \"ask\" or <personality-name>"),
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+    { wxCMD_LINE_OPTION, CMD_ENTRY("p"),  CMD_ENTRY("personality"),           CMD_ENTRY("the personality to use: <personality-name>"),
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
       wxCMD_LINE_VAL_STRING, wxCMD_LINE_NEEDS_SEPARATOR },
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     { wxCMD_LINE_SWITCH, CMD_ENTRY(""),   CMD_ENTRY("no-log"),                CMD_ENTRY("turn off the application log"),
       wxCMD_LINE_VAL_NONE, wxCMD_LINE_PARAM_OPTIONAL },
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     { wxCMD_LINE_SWITCH, CMD_ENTRY(""),   CMD_ENTRY("log-to-file"),           CMD_ENTRY("redirect application log to a file"),
       wxCMD_LINE_VAL_NONE, wxCMD_LINE_PARAM_OPTIONAL },
     { wxCMD_LINE_SWITCH, CMD_ENTRY(""),   CMD_ENTRY("debug-log-to-file"),     CMD_ENTRY("redirect application debug log to a file"),
@@ -232,10 +258,12 @@
       wxCMD_LINE_VAL_NONE, wxCMD_LINE_PARAM_OPTIONAL },
     { wxCMD_LINE_OPTION, CMD_ENTRY(""),   CMD_ENTRY("target"),                CMD_ENTRY("the target for the batch build"),
       wxCMD_LINE_VAL_STRING, wxCMD_LINE_NEEDS_SEPARATOR },
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     { wxCMD_LINE_SWITCH, CMD_ENTRY(""),   CMD_ENTRY("no-batch-window-close"), CMD_ENTRY("do not auto-close log window when batch build is done"),
       wxCMD_LINE_VAL_NONE, wxCMD_LINE_PARAM_OPTIONAL },
     { wxCMD_LINE_SWITCH, CMD_ENTRY(""),   CMD_ENTRY("batch-build-notify"),    CMD_ENTRY("show message when batch build is done"),
       wxCMD_LINE_VAL_NONE, wxCMD_LINE_PARAM_OPTIONAL },
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     { wxCMD_LINE_OPTION, CMD_ENTRY(""),   CMD_ENTRY("script"),                CMD_ENTRY("execute script file"),
       wxCMD_LINE_VAL_STRING, wxCMD_LINE_NEEDS_SEPARATOR },
     { wxCMD_LINE_OPTION, CMD_ENTRY(""),   CMD_ENTRY("file"),                  CMD_ENTRY("open file and optionally jump to specific line (file[:line])"),
@@ -246,6 +274,7 @@
 };
 #endif // wxUSE_CMDLINE_PARSER
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class Splash
 {
     public:
@@ -274,7 +303,9 @@
         cbSplashScreen* m_pSplash;
 };
 } // namespace
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 IMPLEMENT_APP(CodeBlocksApp) // TODO: This gives a "redundant declaration" warning, though I think it's false. Dig through macro and check.
 
 BEGIN_EVENT_TABLE(CodeBlocksApp, wxApp)
@@ -282,6 +313,18 @@
     EVT_TASKBAR_LEFT_DOWN(CodeBlocksApp::OnTBIconLeftDown)
 END_EVENT_TABLE()
 
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+}; // namespace
+IMPLEMENT_APP_CONSOLE(CodeBlocksApp)
+
+BEGIN_EVENT_TABLE(CodeBlocksApp, wxAppConsole)
+    #if wxUSE_GUI
+        EVT_ACTIVATE_APP(CodeBlocksApp::OnAppActivate)
+    #endif // #if wxUSE_GUI
+END_EVENT_TABLE()
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+
+
 #ifdef __WXMAC__
 #if wxCHECK_VERSION(2,9,0)
 #include "wx/osx/core/cfstring.h"
@@ -312,7 +355,11 @@
 
 bool CodeBlocksApp::LoadConfig()
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if (ParseCmdLine(nullptr) == -1) // only abort if '--help' was passed in the command line
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+    if (ParseCmdLine() == -1) // only abort if '--help' was passed in the command line
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         return false;
 
     if (m_UserDataDir!=wxEmptyString)
@@ -367,6 +414,7 @@
 
 void CodeBlocksApp::InitAssociations()
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #ifdef __WXMSW__
     ConfigManager *cfg = Manager::Get()->GetConfigManager(_T("app"));
     if (m_Assocs && cfg->ReadBool(_T("/environment/check_associations"), true))
@@ -395,6 +443,7 @@
         }
     }
 #endif
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 void CodeBlocksApp::InitDebugConsole()
@@ -419,6 +468,7 @@
 #endif
 }
 
+#if wxUSE_GUI
 bool CodeBlocksApp::InitXRCStuff()
 {
     if ( !Manager::LoadResource(_T("resources.zip")) )
@@ -440,7 +490,9 @@
     }
     return true;
 }
+#endif // #if wxUSE_GUI
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 MainFrame* CodeBlocksApp::InitFrame()
 {
     CompileTimeAssertion<wxMinimumVersion<2,8,9>::eval>::Assert();
@@ -458,6 +510,7 @@
     }
     return frame;
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 void CodeBlocksApp::CheckVersion()
 {
@@ -518,28 +571,40 @@
 
 bool CodeBlocksApp::OnInit()
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #ifdef __WXMSW__
     InitCommonControls();
 #endif
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     wxLog::EnableLogging(true);
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     SetAppName(_T("codeblocks"));
+#else
+    SetAppName(_T("codeblocks_con"));
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     s_Loading              = true;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pBatchBuildDialog    = nullptr;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_BatchExitCode        = 0;
     m_Batch                = false;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_BatchNotify          = false;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_Build                = false;
     m_ReBuild              = false;
     m_Clean                = false;
     m_HasProject           = false;
     m_HasWorkSpace         = false;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_SafeMode             = false;
     m_BatchWindowAutoClose = true;
 
     wxTheClipboard->Flush();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     wxCmdLineParser& parser = *Manager::GetCmdLineParser();
     parser.SetDesc(cmdLineDesc);
@@ -552,10 +617,14 @@
     // we'll do this once and for all at startup
     wxFileSystem::AddHandler(new wxZipFSHandler);
     wxFileSystem::AddHandler(new wxMemoryFSHandler);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     wxXmlResource::Get()->InsertHandler(new wxToolBarAddOnXmlHandler);
     wxXmlResource::Get()->InsertHandler(new wxScrollingDialogXmlHandler);
     wxInitAllImageHandlers();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#if wxUSE_GUI
     wxXmlResource::Get()->InitAllHandlers();
+#endif // #if wxUSE_GUI
 
     try
     {
@@ -568,15 +637,22 @@
         if ( !LoadConfig() )
             return false;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         // set safe-mode appropriately
         PluginManager::SetSafeMode(m_SafeMode);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         // If not in batch mode, and no startup-script defined, initialise XRC
         if(!m_Batch && m_Script.IsEmpty() && !InitXRCStuff())
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+        if(!m_Batch && m_Script.IsEmpty())
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             return false;
 
         InitLocale();
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         if (m_DDE && !m_Batch && Manager::Get()->GetConfigManager(_T("app"))->ReadBool(_T("/environment/use_ipc"), true))
         {
             // Create a new client
@@ -664,15 +740,20 @@
         // we also don't need it, if only a single instance is allowed
         Splash splash(!m_Batch && m_Script.IsEmpty() && m_Splash &&
                       Manager::Get()->GetConfigManager(_T("app"))->ReadBool(_T("/environment/show_splash"), true));
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         InitDebugConsole();
 
         Manager::SetBatchBuild(m_Batch || !m_Script.IsEmpty());
         Manager::Get()->GetScriptingManager();
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         MainFrame* frame = nullptr;
         frame = InitFrame();
         m_Frame = frame;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         if (m_SafeMode) wxLog::EnableLogging(true); // re-enable logging in safe-mode
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         if (m_Batch)
         {
@@ -684,13 +765,18 @@
 
             Manager::Get()->RegisterEventSink(cbEVT_COMPILER_FINISHED, new cbEventFunctor<CodeBlocksApp, CodeBlocksEvent>(this, &CodeBlocksApp::OnBatchBuildDone));
             s_Loading = false;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             LoadDelayedFiles(frame);
-
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+            
             BatchJob();
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             frame->Close();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
             return true;
         }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         if (!m_Script.IsEmpty())
         {
             s_Loading = false;
@@ -743,6 +829,7 @@
         Manager::Get()->ProcessEvent(event);
 
         return true;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     }
     catch (cbException& exception)
     {
@@ -766,6 +853,7 @@
 
 int CodeBlocksApp::OnExit()
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     wxTheClipboard->Flush();
 
     if (g_DDEServer) delete g_DDEServer;
@@ -775,6 +863,7 @@
 #endif
     if (m_pSingleInstance)
         delete m_pSingleInstance;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     // ultimate shutdown...
     Manager::Free();
@@ -817,9 +906,13 @@
     EnableLFH();
     try
     {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         int retval = wxApp::OnRun();
         // wx 2.6.3 docs says that OnRun() function's return value is used as exit code
         return m_Batch ? m_BatchExitCode : retval;
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+        return m_Batch ? m_BatchExitCode : 0;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     }
     catch (cbException& exception)
     {
@@ -843,18 +936,31 @@
 
 bool CodeBlocksApp::OnCmdLineParsed(wxCmdLineParser& parser)
 {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     return wxApp::OnCmdLineParsed(parser);
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+    return wxAppConsole::OnCmdLineParsed(parser);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
 void CodeBlocksApp::OnFatalException()
 {
 #if wxUSE_DEBUGREPORT && wxUSE_XML && wxUSE_ON_FATAL_EXCEPTION
     wxDebugReport report;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     wxDebugReportPreviewStd preview;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     report.AddAll();
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     if ( preview.Show(report) )
         report.Process();
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+    cbMessageBox(wxString::Format(_("Something has gone wrong inside %s and it "
+                                    "will terminate immediately.\n"
+                                    "We are sorry for the inconvenience...\n\n"
+                                    "A bug report was generated in %s."), appglobals::AppName.c_str(), report.GetDirectory().c_str()));
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #else
     cbMessageBox(wxString::Format(_("Something has gone wrong inside %s and it will terminate immediately.\n"
                                     "We are sorry for the inconvenience..."), appglobals::AppName.wx_str()));
@@ -901,6 +1007,7 @@
         }
     }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     m_pBatchBuildDialog = m_Frame->GetBatchBuildDialog();
     PlaceWindow(m_pBatchBuildDialog);
     wxTaskBarIcon* tbIcon = new wxTaskBarIcon();
@@ -913,6 +1020,7 @@
                 _("Building ") + wxFileNameFromPath(wxString(argv[argc-1])));
 
     m_pBatchBuildDialog->Show();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     if (m_ReBuild)
     {
@@ -936,6 +1044,7 @@
             compiler->CleanWorkspace(m_BatchTarget);
     }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     // The batch build log might have been deleted in
     // CodeBlocksApp::OnBatchBuildDone().
     // If it has not, it's still compiling.
@@ -961,6 +1070,7 @@
         tbIcon->RemoveIcon();
         delete tbIcon;
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
     return 0;
 }
@@ -985,8 +1095,13 @@
         else
             msg << _("Batch build stopped with errors.\n");
         msg << wxString::Format(_("Process exited with status code %d."), m_BatchExitCode);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         cbMessageBox(msg, appglobals::AppName, m_BatchExitCode == 0 ? wxICON_INFORMATION : wxICON_WARNING, m_pBatchBuildDialog);
+#else
+        cbMessageBox(msg, appglobals::AppName, m_BatchExitCode == 0 ? wxICON_INFORMATION : wxICON_WARNING);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     }
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     else
         wxBell();
 
@@ -1000,8 +1115,10 @@
             m_pBatchBuildDialog = nullptr;
         }
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CodeBlocksApp::OnTBIconLeftDown(wxTaskBarIconEvent& event)
 {
     event.Skip();
@@ -1011,6 +1128,7 @@
         m_pBatchBuildDialog->Refresh();
     }
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
 wxString CodeBlocksApp::GetAppPath() const
 {
@@ -1054,7 +1172,11 @@
     m_AutoFile = file;
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 int CodeBlocksApp::ParseCmdLine(MainFrame* handlerFrame)
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+int CodeBlocksApp::ParseCmdLine()
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 {
     // code shamelessely taken from the console wxWindows sample :)
     bool filesInCmdLine = false;
@@ -1074,7 +1196,9 @@
 
         case 0:
             {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                 if (handlerFrame)
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                 {
                     int count = parser.GetParamCount();
                     filesInCmdLine = count != 0;
@@ -1087,31 +1211,55 @@
                         if (ft == ftCodeBlocksProject)
                         {
                             m_HasProject = true;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                             s_DelayedFilesToOpen.Add(parser.GetParam(param));
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+                            m_AutoFile = parser.GetParam(param);
+                            wxFileName fn(m_AutoFile);
+                            fn.Normalize(); // really important so that two same files with different names are not loaded twice
+                            m_AutoFile = fn.GetFullPath();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                         }
                         else if (ft == ftSource || ft == ftHeader || ft == ftResource)
                         {
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                             s_DelayedFilesToOpen.Add(parser.GetParam(param));
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+                            m_AutoFile = parser.GetParam(param);
+                            wxFileName fn(m_AutoFile);
+                            fn.Normalize(); // really important so that two same files with different names are not loaded twice
+                            m_AutoFile = fn.GetFullPath();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                         }
                         else if (ft == ftCodeBlocksWorkspace)
                         {
                             // only one workspace can be opened
                             m_HasWorkSpace = true;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                             s_DelayedFilesToOpen.Clear(); // remove all other files
                             s_DelayedFilesToOpen.Add(parser.GetParam(param)); // and add only the workspace
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+                            m_AutoFile = parser.GetParam(param);
+                            wxFileName fn(m_AutoFile);
+                            fn.Normalize(); // really important so that two same files with different names are not loaded twice
+                            m_AutoFile = fn.GetFullPath();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                             break; // and stop processing any more files
                         }
                     }
-
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                     // batch jobs
                     m_Batch = m_HasProject || m_HasWorkSpace;
                     m_Batch = m_Batch && (m_Build || m_ReBuild || m_Clean);
                 }
                 else
                 {
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                     wxString val;
                     parser.Found(_T("prefix"), &m_Prefix);
                     parser.Found(_T("user-data-dir"), &m_UserDataDir);
+
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #ifdef __WXMSW__
                     m_DDE = !parser.Found(_T("no-dde"));
                     m_Assocs = !parser.Found(_T("no-check-associations"));
@@ -1122,6 +1270,7 @@
                     m_Splash = !parser.Found(_T("no-splash-screen"));
                     m_HasDebugLog = parser.Found(_T("debug-log"));
                     m_CrashHandler = !parser.Found(_T("no-crash-handler"));
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
                     wxLog::EnableLogging(parser.Found(_T("verbose")));
 
@@ -1132,8 +1281,10 @@
                     }
 
                     // batch jobs
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                     m_BatchNotify          = parser.Found(_T("batch-build-notify"));
                     m_BatchWindowAutoClose = !parser.Found(_T("no-batch-window-close"));
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                     m_Build                = parser.Found(_T("build"));
                     m_ReBuild              = parser.Found(_T("rebuild"));
                     m_Clean                = parser.Found(_T("clean"));
@@ -1143,13 +1294,16 @@
                     // initial setting for batch flag (will be reset when ParseCmdLine() is called again).
                     m_Batch = m_Build || m_ReBuild || m_Clean;
 
-
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                     if (parser.Found(_T("no-log")) == false)
                         Manager::Get()->GetLogManager()->SetLog(new TextCtrlLogger, LogManager::app_log);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                     if (parser.Found(_T("log-to-file")))
                         Manager::Get()->GetLogManager()->SetLog(new FileLogger(_T("codeblocks.log")), LogManager::app_log);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                     if (m_HasDebugLog)
                         Manager::Get()->GetLogManager()->SetLog(new TextCtrlLogger, LogManager::debug_log);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
                     if (parser.Found(_T("debug-log-to-file")))
                         Manager::Get()->GetLogManager()->SetLog(new FileLogger(_T("codeblocks-debug.log")), LogManager::debug_log);
                 }
@@ -1167,6 +1321,7 @@
 {
     if (personality.CmpNoCase(_T("ask")) == 0)
     {
+#if wxUSE_GUI
         CompileTimeAssertion<wxMinimumVersion<2,5>::eval>::Assert(); // just to make sure: wxWidgets 2.4 is dead
 
         const wxArrayString items(Manager::Get()->GetPersonalityManager()->GetPersonalitiesList());
@@ -1177,11 +1332,16 @@
 
         if (dlg.ShowModal() == wxID_OK)
             Manager::Get()->GetPersonalityManager()->SetPersonality(dlg.GetStringSelection());
+#else  // #if wxUSE_GUI
+    #pragma message "Needs code added"
+    ;
+#endif // #if wxUSE_GUI
     }
     else
         Manager::Get()->GetPersonalityManager()->SetPersonality(personality, true);
 }
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 void CodeBlocksApp::LoadDelayedFiles(MainFrame *const frame)
 {
     for (size_t i = 0; i < s_DelayedFilesToOpen.GetCount(); ++i)
@@ -1215,8 +1375,8 @@
         }
     }
 }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
-
 #ifdef __WXMAC__
 
 void CodeBlocksApp::MacOpenFile(const wxString & fileName )
@@ -1237,6 +1397,7 @@
 
 // event handlers
 
+#if wxUSE_GUI
 void CodeBlocksApp::OnAppActivate(wxActivateEvent& event)
 {
     // allow others to process this event
@@ -1259,6 +1420,7 @@
     if (!event.GetActive())
         return;
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
     // fix for bug #18007: In batch build mode the following is not needed
     if (  !m_Batch
         && Manager::Get()->GetEditorManager()
@@ -1285,4 +1447,6 @@
         Manager::Get()->GetEditorManager()->GetNotebook()->SetFocus();
         ed->GetControl()->SetFocus();
     }
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 }
+#endif // #if wxUSE_GUI
Index: src/src/app.h
===================================================================
--- src/src/app.h	(revision 9855)
+++ src/src/app.h	(working copy)
@@ -13,39 +13,60 @@
 #endif
 
 #if !defined(WX_PRECOMP)
-    #include <wx/wx.h>
     #include <wx/intl.h>
+#if wxUSE_GUI
     #include <wx/laywin.h>
+#endif // #if wxUSE_GUI
     #include <wx/image.h>
     #include <wx/filename.h>
     #include <wx/hashmap.h>
+#if wxUSE_GUI
     #include <wx/docview.h> // recent files history
+#endif // #if wxUSE_GUI
 #endif
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #if defined(__WXGTK__) || defined(__WXMOTIF__) || defined(__WXMAC__) || defined(__WXMGL__) || defined(__WXX11__)
     #include "resources/icons/app.xpm"
 #endif
 
 #include <wx/taskbar.h>
 #include <wx/splash.h>
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+
 #include <wx/snglinst.h>
 #include "manager.h"
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #include "main.h"
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+#include "cbplugin.h"
+#include "cbproject.h"
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 class cbSplashScreen;
 
 class CodeBlocksApp : public wxApp
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+class CodeBlocksApp : public wxAppConsole
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 {
     public:
         virtual bool OnInit();
         virtual int OnExit();
         virtual int OnRun();
         wxString GetAppPath() const;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         int ParseCmdLine(MainFrame* handlerFrame);
+#else // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
+        int ParseCmdLine();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void OnAppActivate(wxActivateEvent& event);
         bool OnCmdLineParsed(wxCmdLineParser& parser);
         void OnFatalException();
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void LoadDelayedFiles(MainFrame* frame); // command line or DDE (if available) files
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void SetAutoFile(wxString& file); // method to set m_AutoFile
 #ifdef __WXMAC__
         // in response of an open-document apple event
@@ -55,12 +76,16 @@
 #endif
     protected:
         void OnBatchBuildDone(CodeBlocksEvent& event);
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void OnTBIconLeftDown(wxTaskBarIconEvent& event);
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         bool LoadConfig();
         void InitDebugConsole();
         void InitExceptionHandler();
         bool InitXRCStuff();
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         MainFrame* InitFrame();
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         void CheckVersion();
         void InitLocale();
         int BatchJob();
@@ -75,8 +100,10 @@
         wxString m_Script;
         wxString m_AutoFile; // --file foo.cpp[:line]
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         wxScrollingDialog* m_pBatchBuildDialog;
         MainFrame* m_Frame;
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         wxSingleInstanceChecker* m_pSingleInstance;
 
         bool m_Batch;
@@ -87,14 +114,18 @@
         bool m_Clean;
         bool m_HasProject;
         bool m_HasWorkSpace;
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         bool m_Splash; // splash screen enabled
         bool m_HasDebugLog; // display debug log
         bool m_CrashHandler; // crash handler enabled
         bool m_SafeMode; // all plugins disabled
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 
         void InitAssociations();
 
+#if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
         bool m_DDE; // DDE enabled?
+#endif // #if wxUSE_GUI && !defined(CB_FOR_CONSOLE)
 #ifdef __WXMSW__
         bool m_Assocs; // associations check enabled
         HINSTANCE m_ExceptionHandlerLib;
